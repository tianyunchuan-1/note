常规.Summary
    替换（Ctrl + H）
        1、替换 ~：在Excel中查找如~ 、？、* 等特殊字符时，前面都需要添加波浪线，公式中同理。
        2、替换换行符：把换行的字符替换成其他字符，可以输入Ctrl+j然后替换        
        4、按颜色等格式替换：在excel中可以替换为不止是字符，还可以根据颜色查找替换。【例2】把填充黄色背景、金额为100的数字替换为999。
        7、跨工作簿复制公式：当跨excel文件复制公式时，不但公式会引用原表格位置，单元格的引用也会发生变化。 ！使用替换=号的方法，可以保持公式不变
    跳过空单元格复制

VBA.Summary：
    官方文档
        https://docs.microsoft.com/zh-cn/office/vba/api/excel.xlmarkerstyle

    Array
        arr_i = ={1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26}

    单元格
        rng.End(xlToRight).EntireColumn.Range("a1")



    行
        rngs1.Rows.Count    #计算行数
        Set Rng = Sheets("map").Columns("G:G").Find(what:="9")
            r = Rng.Row
        Range.Find(What,After,LookIn，LookAt,SearchOrder,SearchDirection,MatchCase,MatchByte,SearchFormat)（）
        Range.Find(What,After,xlFormulas，,,,,,)（
    列  
        [c:c]
        [a1:a4].EntireRow.Select
        [a1:d1].EntireColumn.Select

    区域
        Range("a1:c3")
        Range("a1", [f21]).Select
        Range("a1", Cells(Rows.Count, "d").End(xlUp)).Select
        Range("a2", [a2].End(xlDown))
        Range("f2", Cells(Rows.Count,1).End(xlUp))
        Range("f2", [f2].End(xlDown))
        for r=cells(Rows.Count,1).End(xlUp).Row To 2 Step -1
        Range("a1", [a1].End(xlToRight).End(xlDown)),
        Range("C4").Select > Selection.CurrentRegion.Select  （当前区域扩张）
        Sheet1.UsedRange.Select  (Worksheet.UsedRange 属性)
        """ 追加rang
        For Each rng In [a1:a10]
            If rng = "" Then ad = ad & rng.Address & ","
        Next
        """
        For i = 1 To Selection.Count
        Set endrng = Cells.Find("*", , xlFormulas, , , xlPrevious) # 查找最后一个单元格，xlFormulas是指查公式

        r = Selection.Rows.Count
        c = Selection.Columns.Count

        rows(1)

        For Each Rng In Range([a2], Cells(Application.CountA(Columns(1)), 1))
            i = ThisWorkbook.Path & "\7pic\" & Rng & ".png"
            Set rngs = Cells(Rng.Row, 2)
            Sheet1.Shapes.AddPicture i, True, True, rngs.Left, rngs.Top, rngs.Width, rngs.Height
        Next Rng

        Rows(a & ":" & b).Select


    工作表
        Worksheet("流水账")

    公式
        c.FormulaArray = "=" & a & "+" & b  （数组公式）
        Cells(i, 2) = "=" & Cells(i, 1)
        [f3] = "=B3+C3+D3+E3"
        [f4] = "=sum(b4:e4)"
        Cells(1, 3).Formula = "=sumif(a6:a100,b1&""*"",c6:c100)"    '引号包引号，引号嵌套

        "SELECTQ"&Q$30&"=1"

        "=   ""SELECTQ"" & ""C$"" & rrr & ""=1""     "
        '使用工作表公式
        rng = "=B" & rng.Row & "+C" & rng.Row & "+D" & rng.Row & "+E" & rng.Row & ""
        rng = "=sum(B" & rng.Row & ":E" & rng.Row & ")"

        '使用函数
        rng(1, 2) = "=COUNTIF(B:B,f" & rng.Row & ")"
        rng(1, 3) = "=sumIF(B:B,f" & rng.Row & ",c:c)"
        rng(1, 4) = "=averageIF(B:B,f" & rng.Row & ",d:d)"

        '引用工作表函数
        rng(1, 2) = WorksheetFunction.CountIf([a:a], "*" & rng.Value & "*")     '通配符

    操作：
        [a1:d11].ClearContents
        if ws.Name <> "合并" Then
        [a1] = "员工ID": [b1] = "姓名": [c1] = "部门"  #并列赋值
        Columns("a:c").ClearContents
        wb.Close 
        VBA.Split(rng,"|")
        Set ser = cht.SeriesCollection(1)
        cht.ApplyDataLabels xlDataLabelsShowNone
        For each In Selection
        Selection(i).Active
        ''' 生成工作页
        Application.DisplayAlerts = False
        Dim sht As Worksheet
        For Each sht In Sheets
             If sht.Name = "qn_new" Then
                  sht.Delete
              End If
         Next
        Application.DisplayAlerts = True
        Worksheets.Add.Name = "qn_new"
        '''



    格式
        Format(Now, "yyyymmdd-hhmmss")
        cint()  #string转int ！！！
        If VBA.IsNumeric(Range("a1")) Then: MsgBox "number"
        With Selection.TickLabels.Font
                .Name = "MS PGothic"
                .Size = 10
        英文大写： Ucase("a")
        Range([b2], i).ClearFormats
        Selection.NumberFormatLocal = """S""0"   --> Selection.NumberFormatLocal = """" & Cells(32, 1) & """" & "0"


    条件判断
        If i = "" Or i = "缺勤" Then
        If rng1 <> "" And Int(rng1) < 999 Then


    系统：
        MsgBox
        Application.DisplayAlers = False
        Application.DisplayAlers = True
        On Error Resume Next
        On Error Goto 100
        InputBox("请输入关键字")
        shName = InputBox("input sheet name ...")

    数组
        二维数组：arr = Array(Array("a", 10), Array("b", 20), Array("c", 30))
        For i = 1 To UBound(arr)

    打开csv文档
        Sub file()
        Dim file_path As String
        Dim wb, wb0 As Workbook
        Dim excelApp As Excel.Application
        file_path = "C:\Users\tianyunchuan\iCloudDrive\Desktop\_win_Trans_mac_\_excel\ecClinic\order_20190101-20200630_1.csv"
        Set wb0 = ThisWorkbook
        Set wb = GetObject(file_path) ' 打开文件
        wb.Sheets(1).UsedRange.Copy '复制数据 因为csv打开后只有一个sheet
        wb0.Sheets(1).Range("A1").Select
        wb0.Sheets(1).Paste '粘贴
        End Sub

    call 调用子过程

        1) 无参数
        Sub CommandButton1_Click()
        MsgBox "你调用了CommandButton1_Click过程"
        End Sub
         
        Sub CommandButton2_Click()
        Call CommandButton1_Click
        End Sub

        2) 参数调用 -01
        Sub CommandButton3_Click()
        Call MsgStr("这是过程/函数调用示例")
        End Sub
        Sub MsgStr(str As String)
        MsgBox str
        End Sub   

        3) 参数调用 -02

        ' https://akira55.com/call/

        Sub Sub_main()
         
            '･皈､･ﾗ･愠ｰ･鬣・
         
            Dim Tanka, Kazu, Gokei As Long
            Dim Hinmei As String
            
            Hinmei = InputBox("ﾆｷﾃ訷・ｦ､ｷ､ﾆ､ｯ､ﾀ､ｵ､､")
            Tanka = InputBox("・・､・ｦ､ｷ､ﾆ､ｯ､ﾀ､ｵ､､")
            Kazu = InputBox("ﾊﾁｿ､・ｦ､ｷ､ﾆ､ｯ､ﾀ､ｵ､､")
            
            Call Sub_A(Tanka, Kazu, Gokei)
            Call Sub_B(Hinmei, Gokei)
            
         
        End Sub
         
        '---------------------------------------------------------------------------
         
        Sub Sub_A(Tanka, Kazu, Gokei)
            '･ｵ･ﾖ･ﾗ･愠ｰ･鬣爍｡A
                
                Gokei = Tanka * Kazu '------・・｡ﾁﾊﾁｿ､ﾎﾓ桐・
         
        End Sub
         
        '---------------------------------------------------------------------------
         
        Sub Sub_B(Hinmei, Gokei)
            '･ｵ･ﾖ･ﾗ･愠ｰ･鬣爍｡B
         
                MsgBox Hinmei & "､ﾎｺﾏﾓ郷~､ﾏ｡｢" & Gokei & "υ､ﾇ､ｹ｡｣" '-----ﾆｷﾃ訷ﾎｺﾏﾓ郷Yｹ訷桄ｾ"
         
        End Sub

        3) 参数调用 -03

        ' https://valmore.work/excel-vba-call/
        Sub macro1()
            Dim tax As Double
            
            tax = 0.08
            
            Debug.Print "税率は" & tax * 100 & "%です。"
            Call macro2(tax)
            
            Debug.Print "税率は" & tax * 100 & "%です。"
        End Sub
        Sub macro2(ByRef tax As Double)
            tax = 0.1
        End Sub

      
excel 2010 VBA

    2010_第03章：Excel单元格区域操作
        3-0、EXCEL单元格基础
            '---------------------------------------------------------------------------
            '单元格：是excel中最小的一个单位（工作簿，工作表，行，列，单元格）
            '单元格也是我们操作得最多的。
            '单元格行数：1048576
            '单元格列数：16384
            '单元格个数：17179869184
            '单元格容量：32767 个字符

            'VBA中单元格学习的重要性：
            '在后续的章节里：因为在部分的工作是在操作单元格。
            '我们一直离不到单元格的表示方法与操作。
            '那么关于单元格的点点滴滴的信息在VBA中的表示方法就显得非常的重要
            '第三章，将细细的学习关于单元的表示方法，操作，信息等。以用于我们的工作中。

            '演示：单元格的应用
            '-------------------------------------------------------------------------------



        3-1、Range引用基础1
            '----------------------------------------------------
            '单元格对象在VBA中一个非常基础，同时也很重要的。
            '它的表达方式也是非常的多样化。
            '----------------------------------------------------
            'Range 对象
            '代表某一单元格、某一行、某一列、某一选定区域（该区域可包含一个或若干连续单元格区域），或者某一三维区域。

            'Range ("文本型装单元格地址")

            'range的常见写法
            Sub rng()
            Range("a1").Select         '单元格
            Range("a:a").Select        '列
            Range("1:3").Select       '行
            Range("a1:b10").Select     '相邻区域
            Range("a1:d7,c4:e8").Select  '不相个邻区域
            End Sub



        3-2、Range引用基础2 ！！！

            '写法：Range ("文本型装单元格地址1","文本型装单元格地址2")
            'range的变化写法
            Sub rng变化()
            Range("a1:b10").Select '一般写法
            Range("a1", "b10").Select '变化写法1
            Range(Range("a1"), Range("b10")).Select '变化写法2
            Range("a1") = 123
            End Sub

            '注意：
            '1.如果在range前没有指定工作表，则默认为活动工作表
            '2.如果对象不是活动工作表（如活动图表），则会出现错误

            Sub 单元格对象例子()
            Debug.Print Range("a:a").Count '计数工作表最大的行数
            Debug.Print Range("1:1").Count '计算工作表最大的列数
            Debug.Print Application.CountA(Range("a:a")) '计算工作表已使用的行数
            Debug.Print Application.CountA(Range("1:1")) '计算工作表已使用的列数
            End Sub





        3-3、Range引用与变量
            '除了上一课节讲的range基本表示方法外，还有更多的变化写法

            '1.range("地址区域").range("地址区域")
            Sub 序号表示法()
            Range("b2:d4").Range("b2").Select '相对引用的写法
            '参照前一个range的左上单元格
            End Sub

            '2.range地址区域中支持变量
            Sub range的变量支持()
            Dim a%
            a = 3
            Range("a" & a).Select
            Range("c3:e5")(2).Select
            End Sub

            Sub 实例1动态选单元格或区域()
            Dim i%
            i = Application.CountA(Range("c:c")) '找到c列中已使用的最后一个单元格位置
            Range("c" & i).Select '选择C列最后一格
            Range("a1", "c" & i).Select '选择A1到C列的最后一格（方法一）
            Range("a1:c" & i).Select '选择A1到C列的最后一格（方法二）
            '小结：动态单元格区域的定位，可以应用到单据的保存等实际工作中
            End Sub





        3-4、Range引用与索引值
            'range区域中的每个单元格，我们也可以用索引号表示出来
            '写法：range("单元格区域")(行号，列号)



            Sub 索引号取出range的单元格()
            'Range("a1:c4")(4).Select '引用顺序是：从左向右，从上到下选取
            'Range("b2:c4")(3).Select  '以前一个单元格区域为照
            Range("a1:c4")(4.5).Select '当有小数时，则取整
            '注意：如果索引号出现小数，则按照“四舍六入五单双”的“银行家舍入法”
            End Sub


            Sub 行列号定位()
            Range("a1:c4")(3, 2).Select '利用行号与列号定位
            Range("a1:c4")(1.5, 2.5).Select '行列号也可以使用小数
            End Sub

            '小结:
            '1.这个索引值是参照前一个单元格区域左上单元格进行定位引用的
            '2.索引值可以是正数，负数，零值，小数
            Sub 大于等于2500的平增工资()
            Dim rs%, rng%, lj&, k%
            For rs = 1 To 60
                Range("b2:c20")(rs).Select
                 rng = Range("b2:c20")(rs)
                If rng >= 2500 Then lj = lj + rng: k = k + 1
            Next rs
                MsgBox "大于等于2500的平均分为：" & Int(lj / k)
            End Sub


        3-5、Range引用与索引值应用（有条件的平均工资）

            '小结:
            '1.这个索引值是参照前一个单元格区域左上单元格进行定位引用的
            '2.索引值可以是正数，负数，零值，小数
            Sub 大于等于2500的平增工资()
            Dim rs%, rng%, lj&, k%
            For rs = 1 To 60
                Range("b2:c20")(rs).Select
                 rng = Range("b2:c20")(rs)
                If rng >= 2500 Then lj = lj + rng: k = k + 1
            Next rs
                MsgBox "大于等于2500的平均分为：" & Int(lj / k)
            End Sub



        3-6、Cells单元格引用基础

            'cells可以像range一样可以参照前面的单元格位置
            Sub 参照写法()
            Range("b3:f11").Cells(2, 2).Select
            Range("b3:f11").Cells(6).Select '从左到右，从上到下
            Range("b3:f11")(6).Select '与上一句相等
            End Sub
            '注意：
            '1.cells中的数字一样支持正数，负数，0值，小数(四舍六入五单双)
            '2.cells不能像range一样可以引用一个区域，只能引用一个单元格



            'cells还可以嵌套在range中
            Sub 嵌套()
            Range(Range("b1"), Range("f11")).Select '这种嵌套方法写变量比较麻烦
            Range(Cells(3, 2), Cells(11, 6)).Select '这种嵌套方法写变量比较方便
            End Sub


            Sub 动态引用行列区域()
            Dim a%, b%
            a = Application.CountA(Range("a:a"))
            b = Application.CountA(Range("1:1"))
            Range(Cells(1, 1), Cells(a, b)).Select
            End Sub




        3-7、单元格简写

            '除了前面讲的range\cells单元格区域的表示方法还，还是一种简单的写法
            '写法: [单元格地址] '注意：中括号中的单元格地址并不需要双引号("")
            Sub 单元格简写()
            [a3].Select ' 单元格引用
            [b2:c6].Select '单元格区域引用
            [a3,b2:c6,b8:d12].Select '多区域引用
            [a:a].Select '整列引用
            [1:1].Select '整行引用
            End Sub


            '单元格简写的也支持引用子集
            Sub 子集引用()
            [b2:c6].Item(3).Select
            Range("b2:c6")(3).Select
            [b2:c6].Cells(4).Select
            End Sub



            Sub 动态区域的引用()
            a = Application.CountA([a:a])
            b = Application.CountA([1:1])
            Range(Range("a1"), Range(Chr(64 + b) & a)).Select '利用chr函数，让字母形式的列号也支持变量
            End Sub



            Sub chr函数字符循环()
            For i = 1 To 65535
            Cells(i, 1) = i
            Cells(i, 2) = Chr(i)
            Next
            End Sub



        3-8、三种单元格引用小结
            Sub range引用区域且有变量()
            Dim i
            i = 1
            Range("a1:c" & i).Select '引用单元格是区域且有变量
            Cells(i, "c").Select '引用的是单个单元格且有变量
            [a1:19].Select '引用的是区域或单元格且无变量
            End Sub



        3-9、行、列引用 
            '行列引用
            Sub 列引用()
            Columns(1).Select
            Columns("b").Select
            Columns("c:e").Select
            End Sub

            Sub 行引用()
            Rows(1).Select
            Rows("2").Select
            Rows("3:4").Select
            End Sub

            Sub range行列表式法()
            Range("1:1").Select
            Range("2:4").Select
            Range("a:a").Select
            Range("b:d").Select
            End Sub
            Sub 简写法()
            [a:a].Select
            [b:d].Select
            [1:1].Select
            [2:4].Select
            End Sub

            Sub 全选()
            Rows.Select '选择所有行
            Columns.Select '选择所有列
            Cells.Select '选择所单元格
            i = Rows.Count
            j = Columns.Count
            k = Cells.Count
            End Sub
            Sub 动态引用使用区域()
            a = Application.CountA(Columns(1))
            b = Application.CountA(Rows(1))
            Range("a1", Cells(a, b)).Select
            End Sub




        3-10、row与column属性 
            '-------------------------------------------------
            'Range.Row 属性
            '返回区域中第一个子区域的第一行的行号

            'Range.Column 属性
            '返回指定区域中第一块中的第一列的列号
            '-------------------------------------------------

            Sub test()
            i = Range("a3:b9").Range("a5").Row
            j = Range("a3:b9").Row
            i = Range("b3:d9").Range("a5").Column
            j = Range("b3:d9").Column
            End Sub


            Sub row应用()
            For Each rw In Rows("1:13")
                If rw.Row Mod 2 = 0 Then
                    rw.RowHeight = 5
                End If
            Next rw
            End Sub




        3-11、单元格的值与地址 
            '单元格的值表示方法
            Sub 单元格值表示()
            a = [a1].Value  '实际是什么，就是什么
            b = [a1].Text    '看到是什么，就是什么
            c = [a1]
            End Sub

            '注意：一个单元格可以省略value，多单元格区域不能省略
            Sub 多区域赋值()
            Range("e1:e4") = Range("d1:d4").Value
            End Sub

            '单元格地址与引用
            Sub 地址与引用()
            Set rng = [b2:f2]
            [a9] = rng.Address(1, 1)  '绝对引用
            [b9] = rng.Address(0, 0)  '相对引用
            [c9] = rng.Address(1, 0)   '混合引用
            [d9] = rng.Address(0, 1)   '混合引用
            End Sub
            '总结：1代表固定，0代表不固定,默认是绝对引用

            Sub 地址引用实例()
            '将表三成绩中为空的单元格标为未考
            Dim rng As Range, rn$
            On Error Resume Next
            For Each rng In Sheet3.Range("b2:d10")
                If rng = "" Then rn = rn & rng.Address & ","
            Next
            Range(Left(rn, Len(rn) - 1)) = "未考"
            End Sub

            '思考题:用上题的思路，将成绩中的"未考"去掉为空?






        3-12、单元格移动与复制 
            '------------------------------------------------------------
            '1.Range.Cut 方法
                '将单元格区域剪切到指定的区域
            '2.Range.Copy 方法
                '将单元格区域复制到指定的区域
            '------------------------------------------------------------


            Sub 移动复制()
            Range("a1:d8").Cut Range("f1")
            Range("f1:i8").Copy Range("a1")
            End Sub




            Sub 另类复制方法()  !!!
            Range("a10:d17") = Range("a1:d8").Value
            End Sub
            '注：
            '1.等号后的区域一定要加value.否则不成功
            '2.被赋值的区域格式全部去掉


            Sub 出差登记表记录保存()
            Dim rs%, crs%
            rs = Application.CountA([d:d])
            crs = Application.CountA(Sheets("出差记录表").[a:a]) + 1
            If rs = 1 Then GoTo 100
            Range("a2:d" & rs).Copy Sheets("出差记录表").Range("a" & crs)
            End
            100:
            MsgBox "没有要保存的数据！"
            End Sub




        3-13、行列插入与删除 

            '工作表中单元格，行与列的插入与删除
            Sub 插入()
            Rows(2).Insert
            End Sub


            Sub 隔行插入()
            Dim r%
                Do
                    r = r + 2
                    Rows(r).Insert
                Loop Until Cells(r + 1, 1) = ""
            End Sub


            Sub 删除()
            Rows(1).Delete
            End Sub


            Sub 隔行删除()
            Dim r, s
            m = Application.CountA(Columns(1))
                For r = 1 To m / 2
                    Rows(r).Delete
                Next
            End Sub


        3-14、活动单元格与选择区域 

            '活动单元格：activecell,工作表中活动单元格只有一个
            Sub activecells()
            a = activecell.Address  '取得活动单元格地址
            Cells(2, 3).Activate    '激活指定单元格
            End Sub

            'selection光标所选区域
            Sub 光标所选区域()
                Selection = 1
            End Sub

            Sub 在selection中的改变活单元格()
            For i = 1 To Selection.Count
                Selection(i).Activate
            Next
            End Sub
            Sub 运用()
            Dim i As Range
            For Each i In Selection
                If i = "" Or i = "缺勤" Then
                    i = "×"
                End If
            Next i
            End Sub

            Sub 光标所选区域01() ！！！
                Selection = 1
                Set r = ActiveSheet.Range(Selection.Address)
                ads = Selection.Address
            End Sub
            '小结：selection的好处在于，可以很自由灵活选择你想要处理的单元格区域




        3-15、UsedRange已使用区域(条件统计) 
            Sub 宏3()
                Range("C4").Select
                Selection.CurrentRegion.Select
            End Sub

            'Worksheet.UsedRange 属性
            '返回一个 Range 对象，该对象表示指定工作表上所使用的区域

            Sub 已使用区域()
            Sheet1.UsedRange.Select
            End Sub

            '注意：
            '已使用区域的定位方法是：已使用的最小单元格：最大单元格
            '如果单元格中无内容，但设定了格式，也认为是已使用区域
            '如果没有已使用单元格，则默认为A1单元

            Sub usedrange应用()
            For Each Rng In Sheet1.UsedRange
                If IsNumeric(Rng) And Rng >= 90 Then k = k + 1
            Next Rng
            MsgBox "大于等于90分的人数为：" & k & "人"
            End Sub

            '小结：
            '1.usedrange自动计算已用区域的所有值
            '2.不用当数据增加时的处理问题。
            '3.比selection方便，但不够灵活




        3-16、currentregion当前区域 
            'Range.CurrentRegion 属性
            '返回一个 Range 对象，该对象表示当前区域。
                Sub 当前区域()
                    [a1].CurrentRegion.Select
                    [f8].CurrentRegion.Select
                End Sub

                Sub currentregion应用()
                    Rows(8).Clear
                    a = [b2].CurrentRegion.Address
                    b = [b5].CurrentRegion.Address
                    c = [b2].CurrentRegion.Count + 1
                    Set c = Range("b8", Cells(8, c))
                    c.FormulaArray = "=" & a & "+" & b
                End Sub

                'usedrange与currentregion
                '如果表中只有一个区域，两者最后的结果是一样的
                '只是表达方式不一样
                Sub u与c()
                Sheet3.UsedRange.Select
                [a1].CurrentRegion.Select
                End Sub



        3-17、单元格的Offset（给工资条加、减表头） 

            'Range.Offset 属性
            '返回 Range 对象，它代表位于指定单元格区域的一定的偏移量位置上的区域。
            '表达式.Offset(偏移行, 偏移列)
            '表达式   一个代表 Range 对象的变量。
            '偏移行列的数字可以是：正数，负数，零值

            Sub test()
            [a1].Offset(1, 2).Select    '行列都偏移
            [a1].Offset(2).Select       '只偏移行
            [a1].Offset(, 2).Select     '只偏移列

            '如果offset前面的range对象是一个区域，则偏移后也结果尺寸不变
            [a1:d1].Offset(1, 2).Select
            [a1:d1].Offset(2).Select
            [a1:d1].Offset(, 2).Select
            End Sub

            Sub offset应用1()
            Dim i%
            For i = 2 To 8 Step 2
                [a1:e1].Copy [a1:e1].Offset(i)
            Next i
            End Sub
            Sub offset应用2()
            Dim i%
            For i = 2 To 8 Step 2
                [a1:e1].Offset(i) = ""
            Next i
            End Sub




        3-18、单元格的resize(单据数据保存) 
            'Range.Resize 属性
            '调整指定区域的大小。返回 Range 对象，该对象代表调整后的区域。
            '语法
            '表达式.Resize(行数, 列数)
            '表达式   一个返回 Range 对象的表达式。
            Sub test()
            [a1].Resize(2, 3).Select
            [a1].Resize(2).Select
            [a1].Resize(, 3).Select
            End Sub
            Sub 保存()
            Dim i%, j%, k%
            i = [a1].CurrentRegion.Rows.Count - 1
            j = [a1].CurrentRegion.Columns.Count
            k = Application.CountA(Sheet2.Columns(1))
            [a2].Resize(i, j).Copy Sheet2.[a1].Offset(k)
            End Sub




        3-20、specialcells定位(按批注汇总) 

            'Range.SpecialCells 方法
            '返回一个 Range 对象，该对象代表与指定类型和值匹配的所有单元格。
            '语法
            '表达式.SpecialCells(Type, Value)
            '表达式   一个代表 Range 对象的变量。

            Sub 批注汇总()
            MsgBox Application.Sum(Selection.SpecialCells(-4144))
            End Sub
            Sub 删除空行()
            On Error GoTo 100
            Selection.SpecialCells(xlCellTypeBlanks).Select
            Selection.EntireRow.Delete
            Exit Sub
            100:
            MsgBox "没有空行"
            End Sub


        3-21、FIND单元格查找技术 

            名称  必选/可选   数据类型    说明
            What    必选  Variant 要搜索的数据。可为字符串或任意 Microsoft Excel 数据类型。
            After   可选  Variant 表示搜索过程将从其之后开始进行的单元格。此单元格对应于从用户界面搜索时的活动单元格的位置。请注意：After 必须是区域中的单个单元格。要记住搜索是从该单元格之后开始的；直到此方法绕回到此单元格时，才对其进行搜索。如果不指定该参数，搜索将从区域的左上角的单元格之后开始。
            LookIn  可选  Variant 信息类型。
            LookAt  可选  Variant 可为以下 XlLookAt 常量之一：xlWhole 或 xlPart。
            SearchOrder 可选  Variant 可为以下 XlSearchOrder 常量之一：xlByRows 或 xlByColumns。
            SearchDirection 可选  XlSearchDirection   搜索的方向。
            MatchCase   可选  Variant 如果为 True，则搜索区分大小写。默认值为 False。
            MatchByte   可选  Variant 只在已经选择或安装了双字节语言支持时适用。如果为 True，则双字节字符只与双字节字符匹配。如果为 False，则双字节字符可与其对等的单字节字符匹配。
            SearchFormat    可选  Variant 搜索的格式。

            'Range.Find 方法
            '在区域中查找特定信息
            '语法
            '表达式.Find(What, After, LookIn, LookAt, SearchOrder, SearchDirection, MatchCase, MatchByte, SearchFormat)
            '表达式   一个代表 Range 对象的变量。

            Sub 查找最后一个单元格()
            Set endrng = Cells.Find("*", , xlFormulas, , , xlPrevious)
            Range([a1], endrng).Select
            End Sub

            查找符合条件单元格，并返回行值，列值
            Set Rng = Sheets("map").Columns("G:G").Find(what:="9",matchcase=True,lookat=xlwhole,MatchByte=True)
            r = Rng.Row


        3-22、单元格查找应用（制作查询系统） 

            Sub 查询系统()
            ends = Columns(1).Find("*", , , , , searchdirection:=xlPrevious).Row '动态找到A列的最后一个单元格
            Range("g3:l999").Clear '清除之前所有的筛选结果
            For Each Rng In Range("a2:a" & ends)
                m = m + 1
                If Rng Like Range("h1") Then  '如果条件成立，那么
                    k = k + 1
                    Range("a" & m + 1 & ":e" & m + 1).Copy Range("g" & k + 2) '将记录复制到另一个区域
                End If
            Next
            End Sub




        3-23、FIND实例应用(进销存之入库单) 
            Sub 开单()
            Set es = Cells.Find("*", , xlFormulas, , , xlPrevious)
            a = es.Address
            [b2] = "SM" & Format(Now(), "ymdhms")
            Range([a5], es.Offset(4)) = ""
            [e2] = ""
             End Sub

            Sub 保存()
            On Error GoTo 100
                Dim es As Range, a%
               If Sheet2.[f:f].Find([b2]) = [b2] Then
                MsgBox "已经保存过了!"
               Else
            100:
                Set es = Cells.Find("*", , xlFormulas, , , xlPrevious)
                a = Application.CountA(Sheet2.[a:a])
                If es.Row = 4 Then MsgBox "没有填写内容": End
                Range([a5], es).Copy Sheet2.Cells(a + 1, 1)
                Sheet2.Cells(a + 1, "f").Resize(es.Row - 4) = [b2] '保存入库单
                Sheet2.Cells(a + 1, "g").Resize(es.Row - 4) = [e2] '保存供应商
                Sheet2.Cells(a + 1, "h").Resize(es.Row - 4) = Now() '保存日期时间
                MsgBox "保存成功!"
               End If
            End Sub

            Sub 计算()
            Set es = Columns(3).Find("*", , xlFormulas, , , xlPrevious)
            For Each Rng In Range([c5], es)
                Rng.Offset(0, 2) = Rng.Offset(0, 1) * Rng
            Next
            End Sub



        3-24、FIND实例应用(进销存之入库单) 

            Sub 开单()
                Set es = Cells.Find("*", , xlFormulas, , , xlPrevious)
                [b2] = "SM" & Format(Now(), "ymdhms")
                Range([a5], es.Offset(4)) = ""
                [e2] = ""
                 End Sub

                Sub 保存()
                On Error GoTo 100
                    Dim es As Range, a%
                   If Sheet2.[f:f].Find([b2]) = [b2] Then
                    MsgBox "已经保存过了!"
                   Else
                100:
                    Set es = Cells.Find("*", , xlFormulas, , , xlPrevious)
                    a = Application.CountA(Sheet2.[a:a])
                    If es.Row = 4 Then MsgBox "没有填写内容": End
                    Range([a5], es).Copy Sheet2.Cells(a + 1, 1)
                    Sheet2.Cells(a + 1, "f").Resize(es.Row - 4) = [b2] '保存入库单
                    Sheet2.Cells(a + 1, "g").Resize(es.Row - 4) = [e2] '保存供应商
                    Sheet2.Cells(a + 1, "h").Resize(es.Row - 4) = Now() '保存日期时间
                    MsgBox "保存成功!"
                   End If
                End Sub

            Sub 计算()
            Set es = Columns(3).Find("*", , xlFormulas, , , xlPrevious)
            For Each Rng In Range([c5], es)
                Rng.Offset(0, 2) = Rng.Offset(0, 1) * Rng
            Next
            End Sub


        3-25、单元格END属性 

            '====================================================================================
            '1.从录制一个宏开始。操作：(ctrl+向上键、ctrl+向下键、ctrl+向左键、ctrl+向右键)
            '2.看代码

            'Range.End 属性
            '返回一个 Range 对象，该对象代表包含源区域的区域尾端的单元格。
            '等同于按键 (End+向上键、End+向下键、End+向左键、End+向右键)

            '语法
            '表达式.End (Direction)
            '表达式   一个代表 Range 对象的变量。
            '方向    写法          值
            '向上   xlUp        - 4162
            '向下   xlDown      - 4121
            '向左   xlToLeft    - 4159
            '向右   xlToRight   - 4161
            '========================================================================================

            Sub test()
                i = Cells(Rows.Count, 3).End(xlUp).Row
                j = Cells(Rows.Count, 3).End(xlUp).Address
                Range("a1", j).Select
                Range("a1", Cells(i, 3)).Select
            End Sub


            Sub 宏5()
                Selection.End(xlDown).Select
                Selection.End(xlToRight).Select
                Selection.End(xlUp).Select
                Selection.End(xlToLeft).Select
            End Sub




        3-26、单元格END属性应用(查找分期付款最后月份) 

            '====================================================================================
            '1.从录制一个宏开始。操作：(ctrl+向上键、ctrl+向下键、ctrl+向左键、ctrl+向右键)
            '2.看代码

            'Range.End 属性
            '返回一个 Range 对象，该对象代表包含源区域的区域尾端的单元格。
            '等同于按键 (End+向上键、End+向下键、End+向左键、End+向右键)

            '语法
            '表达式.End (Direction)
            '表达式   一个代表 Range 对象的变量。
            '方向    写法          值
            '向上   xlUp        - 4162
            '向下   xlDown      - 4121
            '向左   xlToLeft    - 4159
            '向右   xlToRight   - 4161
            '========================================================================================

            Sub test()
                i = Cells(Rows.Count, 3).End(xlUp).Row
                j = Cells(Rows.Count, 3).End(xlUp).Address
                Range("a1", j).Select
                Range("a1", Cells(i, 3)).Select
            End Sub



            Sub 分期付款最后月()
            i = Cells(Rows.Count, 1).End(xlUp).Row '找到A列的最后一行的行号
            Range("n2", Cells(i, "n")) = "" '将最后付款月下的区域清空
            For j = 2 To i
                k = Cells(j, "n").End(xlToLeft).Column '找到最后付款月所在的列号
                Cells(j, "n") = Cells(1, k) '将对应的月份填入对应的单元格
            Next j
            End Sub

            Sub 宏1()
                Selection.End(xlUp).Select
                Selection.End(xlToLeft).Select
            End Sub

            Sub 宏2()
                Selection.End(xlDown).Select
                Selection.End(xlToRight).Select
                Selection.End(xlUp).Select
                Selection.End(xlToLeft).Select
            End Sub



        3-27、最后的格格 
            '---------------------------------------------------------------
            '这里讨论怎样找到最后一个单元格！
            '不考虑最后量个单元格是：是公式，错误值，隐藏之类的特殊情况。
            '以最后是一个常规的值为准。且以A列的最后一个单元格为准
            '---------------------------------------------------------------

            Sub 最后的单元格()
            a = Cells(Rows.Count, 1).End(xlUp).Row 'end属性
            b = Columns(1).Find("*", , , , , xlPrevious).Row 'find方法
            c = Cells.SpecialCells(xlCellTypeLastCell).Row 'specialcells方法
            d = Sheet1.UsedRange.Rows.Count 'usedrange属性
            e = [a1].CurrentRegion.Rows.Count 'currentregion属性
            f = WorksheetFunction.CountA([a:a]) '工作表函数counta
            g = Application.CountIf([a:a], "<>") '工作表函数countif
            End Sub



        3-28、单元格并集(Union) 
            'Application.Union 方法
            '返回两个或多个区域的合并区域
            '
            Sub test()
            Range("a1:b3,c5:d8").Select '文本地址引用方式
            Union([a1:b3], [c5:d8]).Select '单元格区域引用方式
            End Sub
            '小结：虽然range也可以完成多区域的引用
            '但文本地址的引用方式最多不能超过256个字符
            '而union却没有这个限制



            '我们经常利用变量与union进行单元格的连接
            Sub 连接符单元格连接()
            Dim rng As Range
            For Each rngs In [b2:b10]
                adss = rngs.Address
                ads = ads & rngs.Address & ","
            Next
                ad = Left(ads, Len(ads) - 1)
            End Sub


            Sub union单元格连接()
            Dim rng As Range, rngs As Range
            Set rng = [b2]
            For Each rngs In [b2:b10]
                adss = rngs.Address
                Set rng = Union(rng, rngs)
                ads = rng.Address
            Next
            End Sub




        3-29、单元格并集应用（条件筛选） 

            Sub 条件筛选()
            For Each rng In Range([b2], Cells(Application.CountA([a:a]), 2))
                If rng > 90 Then
                    k = k + 1
                    If k = 1 Then
                        Set rn = rng
                    Else
                        Set rn = Union(rn, rng)
                        aa = rn.Address
                    End If
                End If
            Next
            For Each rngs In rn
                n = n + 1
                Cells(n + 1, "d") = Cells(rngs.Row, "a")
                Cells(n + 1, "e") = rngs
            Next
            End Sub



        3-30、单元格交集(Intersect) 
            'Application.Intersect 方法
            '返回一个 Range 对象，该对象表示两个或多个区域重叠的矩形区域。
            Sub test()
            If Intersect([a1:d10], Selection) Is Nothing Then '注释：Is Nothing 用于判断对象是否存在，对象可以是工作簿，工作表，单元格区域等
                    MsgBox "没有交集"
                Else
                    MsgBox Intersect([a1:d10], Selection).Address
                    Intersect([a1:d10], Selection).Select
            End If
            End Sub


            Sub 隔行插入()
            For i = 0 To Application.CountA(Columns(1)) * 2 Step 2
                Intersect([a1:d2].Offset(i), [a2:d3].Offset(i)).EntireRow.Insert
            Next
            End Sub




        3-31、单元格式之数字格式 
            'Range.NumberFormatLocal 属性
            Sub 获取单元格设置数字格式()
            For Each Rng In [a1:a3]
                Cells(Rng.Row, 2) = Rng.NumberFormatLocal  '获取单元格的格式代码
            Next Rng
            End Sub

            Sub 给单元格设置数字格式()
            For Each Rng In [a1:a3]
                Rng.NumberFormatLocal = "0.00"
            Next Rng
            End Sub




            Sub 保存1111()
            Set es = Cells.Find("*", , xlFormulas, , , xlPrevious)
            a = Application.CountA(Worksheets("记录保存").[a:a])
            Range([a5], es).Copy Worksheets("记录保存").Cells(a + 1, 1)
            With Worksheets("记录保存")
            .Cells(a + 1, "f").Resize(es.Row - 4) = [b2] '保存入库单
            .Cells(a + 1, "g").Resize(es.Row - 4) = [e2] '保存供应商
            .Cells(a + 1, "h").Resize(es.Row - 4) = Now() '保存日期时间
            .Cells(a + 1, "h").Resize(es.Row - 4).NumberFormatLocal = "e-m-d aaaa"
            End With
            MsgBox "保存成功!"
            End Sub



        3-32、单元格式之字体（VBA实现条件格式） 
            'Font 对象
            '包含对象的字体属性（字体名称、字号、颜色等等）。

            'Range.ClearFormats 方法
            '清除对象的格式设置

            '常见font对象的属性
            Sub font对象属性()
            With [a2:a6].Font
                .Name = "微软雅黑" '字体
                .Size = 8 '字号
                .Bold = True '加粗
                .Color = RGB(255, 0, 255) '颜色
            End With
            End Sub

            Sub 大于90分的颜色设置为红色()
            Set i = Cells(Rows.Count, 3).End(xlUp)
            Range([b2], i).ClearFormats
            For Each Rng In Range([b2], i)
                If Rng.Value >= [f1] Then
                With Rng.Font
                    .Name = "华文琥珀"
                    .Size = 20
                    .Bold = True
                    .Color = RGB(255, 0, 0)'Interior 对象
            '代表一个对象的内部

            '针对interior对象，我们用得最多的是它的颜色，下面就来讨论一下。



        3-33、给你点颜色看看(底纹颜色讨论） 
            Sub 索引颜色值()
            For i = 1 To 56
            Cells(i, 1).Interior.ColorIndex = i
            Cells(i, 2) = i
            Next i
            End Sub

            Sub 早期颜色值()
            For i = 0 To 15
            Cells(i + 1, 1).Interior.Color = QBColor(i)
            Cells(i + 1, 2) = i
            Next i
            End Sub

            Sub 三原色颜色值()
            Cells(2, 4).Interior.Color = RGB([a1], [b1], [c1])
            End Sub


            Sub 直接颜色值() '此颜色有255^3种颜色
            Cells(1, 1).Interior.Color = [b1]
            End Sub




        3-34、单元格式实例(工资条格式化) 
            Sub 格式化工资条()
            Dim i%
            i = Cells(Rows.Count, 1).End(xlUp).Row
            For j = 1 To i
                If j Mod 2 Then
                    With Cells(j, 1).EntireRow.Range("a1:g1").Font
                        .Bold = True
                        .Size = 8
                        .ColorIndex = 56
                    End With
                Else
                    With Cells(j, 1).EntireRow.Range("a1:g1").Interior
                        .ColorIndex = 40
                    End With
                End If
            Next j
            End Sub

            Sub 清除格式化()
            Selection.ClearFormats
            End Sub




        3-35、利用查找颜色拾取进行颜色汇总 
            Sub 根据查找功能拾取的颜色求平均()
                On Error GoTo 100
              Dim erng As Range, rng As Range, i As Long
              i = Application.FindFormat.Interior.Color
              Set erng = Cells(Rows.Count, "e").End(xlUp)
              For Each rng In Range([b2], erng)
                If rng.Interior.Color = i Then k = k + rng.Value: n = n + 1
              Next
              MsgBox "最后平均分为：" & k / n & "分"
              End
            100:
              MsgBox "查找功能没有拾取到颜色！"
            End Sub




        3-36、粘贴 
            'Worksheet.Paste 方法
            '将“剪贴板”中的内容粘贴到工作表上。
            '表达式.Paste(Destination, Link)
            '表达式   一个代表 Worksheet 对象的变量。



            Sub 粘贴()
            Range("B1:B6").Copy Range("c9")
            Range("B1:B6").Copy    '复制区域无公式
            Sheet1.Paste Range("c9") '粘贴到c4单元格
            End Sub



            Sub 粘贴2()
            Range("c1:c6").Copy    '复制单元格有公式
            Sheet3.Paste  '如果不指定 Destination 参数，则在使用该方法之前必须选择目标区域。
            End Sub


            Sub 粘贴1()
            Range("c1:C6").Copy    '复制c1单元格
            Sheet3.Paste , True '
            Application.CutCopyMode = True
            End Sub



            Sub 宏1()
                Range("C1:C6").Select
                Range("C6").Activate
                Selection.Copy
                Range("D9").Select
                ActiveSheet.Paste
            End Sub

            Sub 宏2()
                Selection.Copy
                Range("F6").Select
                ActiveSheet.Paste
                Application.CutCopyMode = False
            End Sub
                End With
                End If
            Next Rng
            End Sub



        3-37、选择性粘贴 
            'Range.PasteSpecial 方法
            '将 Range 从剪贴板粘贴到指定的区域中。
            '语法
            '表达式.PasteSpecial(Paste, Operation, SkipBlanks, Transpose)
            '表达式   一个代表 Range 对象的变量。


            Sub 选择怪粘贴()
            Range("c2:c10").Copy
            Range("d2").PasteSpecial 12
            End Sub


            Sub 选择怪粘贴运算()
            Range("b2:b9").Copy
            Range("d2").PasteSpecial , 2
            Range("c2:c9").Copy
            Range("d2").PasteSpecial , 2
            End Sub
            Sub 选择怪粘贴跳过空单元()
            Range("b2:b9").Copy
            Range("e2").PasteSpecial , , True
            End Sub
            Sub 选择性粘贴转置()
            Range("a2:b9").Copy
            Range("a11").PasteSpecial 12, , , True
            End Sub



        3-38、合并单元格（相同部门的合并） 
            'Range.Merge 方法
            '由指定的 Range 对象创建合并单元格。


            Sub 合并单元格()
                Selection.Merge
            End Sub


            Sub 合并单元格实例()
            Dim er%, rng%, rg As Range
            Application.DisplayAlerts = False
            er = Application.CountA([a:a])
            For rng = er To 2 Step -1
                Set rg = Range("a" & rng)
                If rg = rg.Offset(-1) Then rg.Offset(-1).Resize(2).Merge
            Next
            Application.DisplayAlerts = True
            End Sub




        3-39、合并单元格实例（取消合并单元格并保持数据） 
            '-----------------------------------------------------------------------
            'Range.MergeArea 属性
            '返回一个 Range 对象，该对象代表包含指定单元格的合并区域。

            'Range.UnMerge 方法
            '将合并区域分解为独立的单元格
            '--------------------------------------------------------------------------
            Sub test()
            a = Range("a1").MergeArea.Count
            [a1].UnMerge
            End Sub


            Sub 解除合并单元格后保持原来的数据()
            Dim b%, rng As Range
                For Each rng In Selection
                    b = rng.MergeArea.Count
                    rng.UnMerge
                    rng.Resize(b) = rng
                Next
            End Sub




        3-40、批注基础(有条件的添加批注) 
            'Comment 对象
            '代表单元格批注


            '批注添加

            Sub 批注添加()
                With [a1]
                   If .Comment Is Nothing Then
                    .AddComment.Text "123"
                    .Comment.Visible = True
                   End If
                End With
            End Sub

            Sub 删除批注()
            For Each Rng In Selection
            If Not Rng.Comment Is Nothing Then
                Rng.ClearComments
            End If
            Next
            End Sub

            Sub 批量添加批注()
                For Each Rng In Range("a2:a20")
                    Rng.ClearComments
                    If Rng >= 90 Then Rng.AddComment.Text "优秀"
                Next
            End Sub




        3-41、批注修改（给员工加批注图片） 
            '修改批注
            Sub 修改批注()
            Range("a2").AddComment '添加批注
            [a2].Comment.Shape.Height = 50 '设置批注高度
            [a2].Comment.Shape.Width = 40 '设置批注宽度
            [a2].Comment.Shape.Fill.UserPicture ThisWorkbook.Path & "\7pic\阿汤.png"
            End Sub

            Sub 批量将批注增加背景()
            For Each Rng In Selection
            paths = ThisWorkbook.Path & "\7pic\" & Rng.Value & ".png"
                Rng.ClearComments
                Rng.AddComment
                Rng.Comment.Shape.Height = 50
                Rng.Comment.Shape.Width = 40 '设置批注宽度
            Rng.Comment.Shape.Fill.UserPicture paths
            Next
            End Sub



        3-42、图形基础 
            'Shapes 对象
            '指定的工作表上的所有 Shape 对象的集合。
            '说明
            '每个 Shape 对象都代表绘图层中的一个对象，如自选图形、任意多边形、图片、图表等。



            Sub abc()
            Dim ob As Shape
            n = Sheet1.Shapes.Count
            For Each ob In Sheet1.Shapes
                k = k + 1
                ob.Select
                Cells(k + 1, "f") = ob.Name     '图形名称
                Cells(k + 1, "g") = ob.Type     '图形类型
                Cells(k + 1, "h") = ob.Top      '顶端坐标
                Cells(k + 1, "i") = ob.Left     '左端坐标
                Cells(k + 1, "j") = ob.Width    '宽度
                Cells(k + 1, "k") = ob.Height   '高度
            Next ob
            End Sub

            Sub 图形插入()
            Sheet3.Shapes.AddPicture ThisWorkbook.Path & "\7pic\林志玲.png", _
            True, True, 100, 100, 70, 70
            End Sub

            Sub 图形删除()
            For Each shp In Sheet3.Shapes
                shp.Delete
            Next shp
            End Sub




        3-43、图形插入实例（根据姓名导入图片） 
            Sub 宏1()
            For Each shap In Sheet1.Shapes
                If shap.Type <> 8 Then shap.Delete
            Next shap
            For Each Rng In Range([a2], Cells(Application.CountA(Columns(1)), 1))
                i = ThisWorkbook.Path & "\7pic\" & Rng & ".png"
                Set rngs = Cells(Rng.Row, 2)
                Sheet1.Shapes.AddPicture i, True, True, rngs.Left, rngs.Top, rngs.Width, rngs.Height
            Next Rng
            End Sub



        3-44、综合运用(多表合并) 
            Sub 多表合并()
            Dim i%, rs%, rss%, st As Worksheet, zst As Worksheet
            Set zst = Sheets("1季度") '将汇总工作表"1季度"定义为变量zst
            For i = 1 To 3
                Set st = Sheets(i & "月") '将1-3每月的工作表定义为变量st
                rs = st.UsedRange.Rows.Count ' 计算1-3月份每个表的最后一行
                rss = zst.UsedRange.Rows.Count + 1 '计算“1季度的最后一行的下一行”
                st.Range("a2:b" & rs).Copy zst.Cells(rss, 1) '复制1-3表的数据到总表中
                zst.Cells(rss, 3).Resize(rs - 1) = i & "月" '将1-3表的工作表名写入到总表对应的记录中
            Next
            End Sub



        3-45、综合运用(多表拆分) 
            Sub 多表拆分()
              For f = 1 To 3 '循环三次（只拆分三个月）
                    Worksheets.Add.Name = f & "月" '新建工作表，并以月份命名
                    For Each Rng In Sheets("总表").Range("a2:a15")
                        If Rng.Value = f & "月" Then '如果a列的值等于当前的月份
                           n = "a" & Rng.Row & ":d" & Rng.Row '构造被复制的源表区域
                           y = y + 1 '新表行数累计
                           If y = 1 Then
                           Sheets("总表").Range("a1:d1").Copy Sheets(f & "月").Cells(y, 1)
                           End If
                           Sheets("总表").Range(n).Copy Sheets(f & "月").Cells(y + 1, 1) '则将当前月份所在行复制到新建月份表中
                        End If
                    Next
                    y = 0 '分表行数累计归零
              Next
            End Sub

    2010_第4章：Excel VBA事件过程
        4-0、EXCEL事件程序定义与作用
            'sheet1
            Private Sub Worksheet_SelectionChange(ByVal Target As Range)
            Dim rs
            rs = Application.CountA(Columns(1))
                If Target.Address = Range("a1:a" & rs).Address Then
                    For i = 1 To rs
                        Cells(i, 2) = "=" & Cells(i, 1)
                    Next
                End If
            End Sub

            'sheet2
            Private Sub Worksheet_SelectionChange(ByVal Target As Range)
            On Error Resume Next
            If Target.Address = "$A$3" Or Target.Address = "$B$3" _
            Or Target.Address = "$C$3" Or Target.Address = "$D$3" Then
            Target.Value = Target.Value + 1
            End If
            End Sub


            '1.定义
            'excel事件程序：因为一个操作(动作)而触发了一段程序。让程序发生了运行。
            '就像机关设置


            '2.实例
            '例1：打开工作表1，则运行一段程序（选择工作表1触发程序）
            '例2：保护工作表数据实例。


            '3.作用
            'excel事件程序的作用：以前程序只能通过手工运行或指定宏功能来完成
            '事件程序则可以却因不同的操作而自动触发运行不同的程序。

            '4.代码位置
            'excel事件程序代码存放在位置
            '-----------------------------------
            '事件类型   代码位置
            '-----------------------------------
            '工作表事件 工作表
            '工作簿事件 工作簿(thisworkbook)
            '程序事件   工作簿(thisworkbook)或类模块




        4-1、事件程序基础
            'sheet1
            'Private Sub Worksheet_SelectionChange(ByVal Target As Range)
            'MsgBox Target.Address
            'End Sub
            '

            Private Sub Worksheet_SelectionChange(ByVal Target As Range)
            If Target.Address <> "$A$1" Then [a1].Activate
            End Sub

            'sheet2
            Private Sub Worksheet_SelectionChange(ByVal Target As Range)
            MsgBox "欢迎"
            End Sub

            '代码存储位置

            '事件                                   代码位置
            '-------------------------------------------------------
            '应用程序-根据应用程序的动作进行控制    类模块或thisworkbook    对所有工作簿操作的相关事件
            '工作簿-根据工作簿的动作进行控制        thisworkbook            对所有工作表操作的相关事件
            '工作表-根据工作表的动作进行控制        sheet1.sheet2....       对工作表中所有单元操作的相关事件


            '2.括号里面是参数(传回值用法)

            'target:传递单元格对象（例子：禁止选择）
            'sh:传递工作表对象（例子：新建工作表时提示更改名称）

            '3.代码保护
            '方法:工具-VBAProject属性-保护




        4-2、工作表事件实例1（自选计算与投票统计）
            'sheet1
            Private Sub Worksheet_SelectionChange(ByVal Target As Range)
            Dim rs
            rs = Application.CountA(Columns(1))
                If Target.Address = Range("a1:a" & rs).Address Then
                    For i = 1 To rs
                        Cells(i, 2) = "=" & Cells(i, 1)
                    Next
                End If
            End Sub


            'sheet2
            Private Sub Worksheet_SelectionChange(ByVal Target As Range)
            On Error Resume Next
            If Target.Address = "$A$3" Or Target.Address = "$B$3" _
            Or Target.Address = "$C$3" Or Target.Address = "$D$3" Then
            Target.Value = Target.Value + 1
            End If
            End Sub




        4-3、工作表事件实例2（状态栏地址与防工作表名更改)
            'Application.StatusBar 属性
            '返回或设置状态栏中的文字。String 类型，可读写

            'sheet1
            '当选择的单元格地址显示在状态栏上方法一
            Private Sub Worksheet_SelectionChange(ByVal Target As Range)
            Application.StatusBar = "当前选择的区域是：" & Target.Address(0, 0)
            End Sub

            Private Sub Worksheet_Deactivate()
            Application.StatusBar = ""
            End Sub

            'sheet2
            '当选择的单元格地址显示在状态栏上方法一

            Private Sub Worksheet_SelectionChange(ByVal Target As Range)
            Application.StatusBar = "当前选择的区域是：" & Selection.Address(0, 0)
            End Sub

            Private Sub Worksheet_Deactivate()
            Application.StatusBar = "当前选择的区域是："
            End Sub

            'sheet3
            Private Sub Worksheet_SelectionChange(ByVal Target As Range)
            If Sheet3.Name <> "成绩表" Then Sheet3.Name = "成绩表"
            End Sub







        4-4、工作表事件实例3（自动列出工作表名与单元格区域保护）
            Private Sub Worksheet_Activate()
            For Each sht In Sheets
                If sht.Name <> "全年月份" Then
                    k = k + 1
                    Sheets("全年月份").Cells(k, 1) = sht.Name
                End If
            Next
            End Sub




            Private Sub Worksheet_SelectionChange(ByVal Target As Range)
            If Intersect(Target, [a1:c12]) Is Nothing Then
                MsgBox "你只能在[a1:c12]区域中工作！"
                [a1].Select
            End If
            End Sub




        4-5、工作簿事件实例1（自动选择月份表、右键禁用、打印控制）
            '事件中的Cancel:

            ' 默认为false，在完成事件内代码效果后，接着继续完成操作的后续效果。
            ' 而为true时，在完成事件内代码效果后，终止当前操作的后续效果。

            ' 相当于给用户控制事件提供一个开关。可以把用户自定义事件代替默认事件
            ' 没有Cancel就是说不给你这个控制权限，一旦一始就要按流程结束。




        4-6、工作簿事件实例2（给工作表加密码）
            'Application.EnableEvents 属性
            'Application.EnableEvents = True/FALSE
            '如果对指定对象启用事件，则该属性值为 True。Boolean 类型，可读写。
            '作用：临时关闭，防止死循环

            'sheet1
            Private Sub Worksheet_Activate()
            MsgBox "欢迎来到工作表1^_^"
            End Sub

            'sheet2
            Private Sub Worksheet_Activate() '激活工作表触发的程序
            a = InputBox("请输入密码")
            If a = 123 Then
                Cells.Font.Color = RGB(0, 0, 0)
                Application.EnableEvents = False
            Else
                Sheet3.Activate
            End If
            End Sub




        4-7、应用程序事件基础
            '应用程序事件：是对每个打开工作簿操因操作所发生的事件程序
            '应用程序事件代码位置：thisworkbook或者类模块
            '应用程序事件代码在thisworkbook中的存在的先决条件

            '   1.申明变量
            '   Public WithEvents app As Excel.Application

            '   2.工作簿打开时运行
            '   Private Sub Workbook_Open()
            '   Set app = Excel.Application
            '   End Sub

            '   3.将1、2点的代码写在thisworkbook中,并保存为“加载宏”文件（xla,xlam）

            '   4.在加载宏菜单中加载第三步保存的加载宏文件。
            '   目的：任何时候都能依附在excel文件中。

            '   例子：任何时候都不能增加工作表





        4-8、应用程事件实例（打印控制）
            Private Sub excelapp_SheetSelectionChange(ByVal Sh As Object, ByVal Target As Range) '4-8课内容
            Application.StatusBar = "选择区域是：" & Target.Address(0, 0) '任意工作表显示选择区域地址
            End Sub


            Private Sub excelapp_NewWorkbook(ByVal Wb As Workbook)
            Application.Dialogs(5).Show '强制新建就保存
            End Sub

            Private Sub excelapp_WorkbookBeforePrint(ByVal Wb As Workbook, Cancel As Boolean) '4-8课内容
            a = InputBox("请输入打印密码") '打印机要求输入打印密码
            If a = 123 Then
                Cancel = False
            Else
                Cancel = True
                MsgBox "对不起，密码不正确，你不能打印！"
            End If
            End Sub

            Private Sub excelapp_SheetSelectionChange(ByVal Sh As Object, ByVal Target As Range) '4-8课内容
            Application.StatusBar = "Range is & Target.Address(0, 0) '任意工作表显示选择区域地址"
            End Sub




        4-9、事件程序总结 
            1.各种事件的作用范围
            工作表：作用于某个工作表下的所有单元格操作
            工作簿：作用于某个工作簿下的所有工作表
            应用程序:作用于所有工作簿。

            2.各种事件过程代码的执行顺序

            'sheet1
            Private Sub Worksheet_SelectionChange(ByVal Target As Range)
            MsgBox "你触发了""工作表""事件"
            End Sub

    2010_第6章：VBA与字典技术
        6-0、字典技术的魅力

        6-1、字典基础(你可能不会字典！)
            '1.关于字典
            '字典: 是为字词提供音韵、意思解释、例句、用法等等的工具书.英文: dictionary
            '字典（Dictionary）：是微软Windows脚本语言中的一个很有用的对象。
            '语法结构也与传统字典的结构差不多

            '2.字典特点
            'KEY的唯一性
            'KEY与Item的相互对应着关系


            '3.字典有什么用
            '字典+数组=更强大

            '4.字典并不存在于VBA中，需要调用。

            '调用方法一：引用法（前期绑定）
            '工具-引用-浏览-找到scrrun.dll-确定

            '调用方法二：直接创建法（后期绑定）
            'Set d = CreateObject("scripting.dictionary")

            '建议写代码时做前期绑定，写完之后改成后期绑定.

            Sub test()
            Set d = CreateObject("scripting.dictionary")
            End Sub




        6-2、字典语法基础1
            'Add方法
            '向 Dictionary 对象中添加一个关键字项目对。
            'object.Add (key, item)
            'Object
            '必选项。总是一个 Dictionary 对象的名称。

            'Key
            '必选项。与被添加的 item 相关联的 key。

            'Item
            '必选项。与被添加的 key 相关联的 item。

            '说明
            '如果 key 是唯一存在的，否则将导致一个错误。
             
            Sub test()
            Dim d As New Dictionary
            Set d = CreateObject("scripting.Dictionary")
            d.Add "张三", "123"
            d.Add "李四", "456"
            '对象.新增 Key,Item
            '注意：在本地窗口中可能看不到Item条件。

            'Keys方法
            '返回一个数组，其中包含了一个 Dictionary 对象中的全部现有的关键字。
            i = d.Keys(1) '前期绑定写法   '方法1
            j = Application.Index(d.Keys, 2) '方法2
            k = d.Keys
            l = k(1) '方法3

            'Items方法
            '返回一个数组，其中包含了一个 Dictionary 对象中的所有项目。
            r = d.Items(1) '前期绑定写法 '方法1
            s = Application.Index(d.Items, 2) '方法2
            t = d("李四") '方法3
            w = d.Items
            v = w(1) '方法4
            End Sub





        6-3、字典语法基础2
            Sub test()
            Dim d As New Dictionary
            'Set d = CreateObject("scripting.dictionary")
            d.Add "张三", "13434544323"
            d.Add "李四", "13589898999"
            d.Add "王五", "13456565567"

            'Exists方法
            '如果 Dictionary 对象中存在所指定的关键字则返回 true，否则返回 false。
            ' a = d.Exists("李四")

            'Remove方法
            'Remove 方法从一个 Dictionary 对象中清除一个关键字，项目对。
            d.Remove ("李四")

            'RemoveAll方法
            'RemoveAll 方法从一个 Dictionary 对象中清除所有的关键字，项目对。
            d.RemoveAll
            End Sub

            '字典对象的方法有6个：
            'Add 添加一条关键字与条目
            'Keys 返回所有关键字(形成1维数组)
            'Items 返回所有条目(形成1维数组)
            'Exists 关键字是否存在(TRUE/FALSE)
            'Remove 移除关键字与对应的条目
            'RemoveAll 移除所有关键字与对应的条目




        6-4、字典语法基础3
            '字典对象的属性有4个：CompareMode属性、Count属性、Key属性、Item属性。
            Sub test()
            'Dim d As New Dictionary

            Set d = CreateObject("scripting.dictionary")
            '1.CompareMode属性
            '设置或者返回在 Dictionary 对象中进行字符串关键字比较时所使用的比较模式。
            d.CompareMode = 0  '1则不区分大小写，0则区分大小写
            d.Add "a", ""
            d.Add "A", ""

            d.Add "张三", "13434544323"
            d.Add "李四", "13589898999"
            d.Add "王五", "13456565567"

            '2.Count属性
            '返回一个Dictionary 对象中的项目数.只读属性
            k = d.Count

            '3.Key属性
            '在 Dictionary 对象中修改一个 key。
            d.Key("王五") = "牛三斤"

            '4.Item属性
            '在一个 Dictionary 对象中设置或者返回所指定 key 的 item。对于集合则根据所指定的 key 返回一个 item。读/写。
            i = d.Items

            d.Item("张三") = "112233"

            i = d.Items

            d("张三") = 987 '简写

            i = d.Items
            '注意：容易混淆知识点。d.key("a")与d("a")
            End Sub



        6-5、字典数据写入技巧讨论
            Sub test()
            Dim d As New Dictionary
            On Error Resume Next
            arr = Range("a2:b" & Cells(Rows.Count, 2).End(xlUp).Row)
            For i = 1 To UBound(arr)
                d.Add arr(i, 1), arr(i, 2)
            Next
            i = d.Keys
            j = d.Items
            End Sub
            '小结：如果有错误后继续执行后的结果是，只记当第1次写入的key与item

            Sub test2()
            Dim d As New Dictionary
            arr = Range("a2:b" & Cells(Rows.Count, 2).End(xlUp).Row)
            For i = 1 To UBound(arr)
                    j = arr(i, 1)
                    m = arr(i, 2)
                d.Item(arr(i, 1)) = arr(i, 2) '要修改的关键字(key)没有,就增加到字典中
                k = d.Item("张三")
            Next
            n = d.Items
            End Sub
            '代码运行总结：
            '   对字典Item值的修改：1.有key则修改，无key则添加。
            '这两个特点作用非常大，可以求不重复值，可以做分类汇总





        6-6、字典实例(第1次与最后一次采购价提取)
            '实例一：求每种产品第一次采购价
            Sub first()
            Dim arr()
            On Error Resume Next
            Set d = CreateObject("scripting.dictionary")
            arr = Range("b1:c" & Cells(Rows.Count, 3).End(xlUp).Row)
            For i = 1 To UBound(arr)
                d.Add arr(i, 1), arr(i, 2)
            Next
            [e1].Resize(d.Count) = Application.Transpose(d.keys)
            [f1].Resize(d.Count) = Application.Transpose(d.items)
            End Sub

            '实例一：求每种产品最后一次采购价
            Sub last()
            Dim arr()
            Set d = CreateObject("scripting.dictionary")
            arr = Range("b1:c" & Cells(Rows.Count, 3).End(xlUp).Row)
            For i = 1 To UBound(arr)
                d(arr(i, 1)) = arr(i, 2)
            Next
            [i1].Resize(d.Count) = Application.Transpose(d.keys)
            [j1].Resize(d.Count) = Application.Transpose(d.items)
            End Sub




        6-7、字典实例（多表求不重复值）
            Sub test()
            Set d = CreateObject("scripting.dictionary")
            For Each sh In Sheets
                c = sh.Name
                If sh.Name <> "品名" Then

                    arr = sh.Range("a1:a" & sh.Cells(Rows.Count, 1).End(xlUp).Row)
                    For Each Rng In arr
                        d(Rng) = ""
                    Next
                End If
            Next
            [a1].Resize(d.Count) = Application.Transpose(d.keys)
            End Sub





        6-8、字典实例(字典与数组经典结合)
            Sub test()
            Set d = CreateObject("scripting.dictionary")
            arr = Sheet1.Range("a1:b" & Sheet1.Cells(Rows.Count, "a").End(xlUp).Row)
            For Each Rng In arr
                arr1 = VBA.Split(Rng, "|")
                For Each rngs In arr1
                    d(rngs) = ""
                Next
                i = VBA.Join(d.keys, "|")
                n = n + 1
                Sheet2.Cells(n, "a") = i
                d.RemoveAll
            Next
            End Sub




        6-9、字典实例(分类计算)
            Sub 分类计数()
            Dim arr1
            Set d = CreateObject("scripting.dictionary")
            arr = Range("b2:b" & Cells(Rows.Count, 2).End(xlUp).Row)
            For Each Rng In arr
                i = d(Rng)
                d(Rng) = d(Rng) + 1
                i = d(Rng)
            Next
            [e1].Resize(d.Count) = Application.Transpose(d.keys)
            [f1].Resize(d.Count) = Application.Transpose(d.items)
            End Sub

            Sub 分类求和()
            Dim arr1
            Set d = CreateObject("scripting.dictionary")
            arr = Range("b2:c" & Cells(Rows.Count, 2).End(xlUp).Row)
            For i = 1 To UBound(arr)
                d(arr(i, 1)) = d(arr(i, 1)) + arr(i, 2)
            Next
            [e8].Resize(d.Count) = Application.Transpose(d.keys)
            [f8].Resize(d.Count) = Application.Transpose(d.items)
            End Sub




        6-10、字典应用（多列合并计算）
            Sub 多列合并计算()
            Dim arr1()
            Set d = CreateObject("scripting.dictionary")
            arr = Range("a2:d" & Cells(Rows.Count, 2).End(xlUp).Row)
            For i = 1 To UBound(arr)
                 If Not d.exists(arr(i, 1)) Then
                    n = n + 1
                    d(arr(i, 1)) = n
                    ReDim Preserve arr1(1 To 4, 1 To n)
                    arr1(1, n) = arr(i, 1)
                    arr1(2, n) = arr(i, 2)
                    arr1(3, n) = arr(i, 3)
                    arr1(4, n) = arr(i, 4)
                Else
                    m = d(arr(i, 1))
                    arr1(2, m) = arr1(2, m) + arr(i, 2)
                    arr1(3, m) = arr1(3, m) + arr(i, 3)
                    arr1(4, m) = arr1(4, m) + arr(i, 4)
                 End If
            Next
            [f2].Resize(n, 4) = Application.Transpose(arr1)
            End Sub





        6-11、字典应用(自动查询)
                Sub test() 条目数组用法
                Set d = CreateObject("scripting.dictionary")
                With Sheets("data")
                    arr = .Range("a2:e" & .Cells(Rows.Count, 1).End(xlUp).Row)
                End With
                For i = 1 To UBound(arr)
                    d(arr(i, 1)) = Array(arr(i, 2), arr(i, 3), arr(i, 4), arr(i, 5))
                    j = d(arr(i, 1))
                Next
                For Each Rng In Range("a3:a" & Cells(Rows.Count, 1).End(xlUp).Row)
                    Rng.Offset(0, 1).Resize(1, 4) = d(Rng.Value)
                Next
                End Sub

    2010_第7章：正则表达式与VBA
        7-1、从通配符到正则表达式
            1.你没有使用过正则表达式？甚至听都没有听说过？
            2.你总该用过通配符"*"与"?"号。如果你是从至尾听的课。

            3.正则表达式就像excel中的查找替换，但功能强很多倍。
            4.查找替换能完成的，正则能完成。正则能完成的，查找替换不一定能完成。

            5.举例说明：正则的强大功能
            a.7-4 b.7-15 c.7-21

            6.正则表达式概述总结



        7-2、VBA中引入正则表达式
            '正则表达式：是对字符串操作的一种逻辑公式。
            '    就是用事先定义好的一些特定字符、及这些特定字符的组合，
            '    组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑。

            '1.正则表达式：是神经生理学家用数学方式来描述这些神经网络的一种方法。
            '2.后来被引用到了计算机领域
            '3.正则表达式特点：神奇，强大，好用，复杂
            '4.支持正则的程序语言：PHP JAVA VBScript.... 几乎所有主流语言都支持正则表达式。
            '5.正则表达式工具：需要一个测试工具
            '想要在VBA中使用正则表达式，也需要像字典一样引入。

            '1.前期绑定：工具-引用-Microsoft VBScript Regular Expressions 5.5 可以看到关于正则的相关方法属性

            '2,后期绑定：Set regex = CreateObject("VBScript.RegExp")

            '3.建议代码编写与测试阶段用"前期绑定"，完成后用"后期绑定"

            '4.正则表达式测试工具的使用。



        7-3、正则表达式基础
            Sub test()
            Dim regx As New RegExp
            sr = "aabcabcbac"
            regx.Global = True 'Global属性：查找范围：true全部查找，false只查找第1个，默认false
            regx.Pattern = "a" 'Pattern属性：书写正则表达式，默认为""

            '----------------------------------
            Set k = regx.Execute(sr) 'Execute方法：返回匹配成功的结果，是一个对象
            For Each m In k
                MsgBox m.Value '将匹配成功能的结果循环出来
            Next
            '----------------------------------

            '----------------------------------
            n = regx.Replace(sr, "-") 'Replace方法：将匹配成功的结果做替换。
            MsgBox n
            '----------------------------------
            End Sub




        7-4、正则表达式(普通字符)
            '正则表达式之普通字符
            Sub test()
            Set regx = CreateObject("vbscript.regexp")
            With regx
                .Global = True
                .Pattern = "消售"
               Set Rng = Range("a2:a" & Cells(Rows.Count, 1).End(xlUp).Row)
               For Each rn In Rng
               n = n + 1
                Cells(n + 1, 1) = .Replace(rn.Value, "销售")
               Next
            End With
            End Sub




        7-5、正则表达式（元字符）

            \d 匹配一个数字字符。

            \D 匹配一个非数字字符。

            \w 匹配包括下划线的任何单词字符。"A-Za-z0-9_"

            \W 匹配任何非单词字符。

            \s 匹配任何空白字符，包括空格、制表符、换页符等等。

            \S 匹配任何非空白字符。

            \b 匹配一个单词边界，也就是指单词和空格间的位置。

            \B 匹配非单词边界。

            \n 匹配一个换行符。

            \r 匹配一个回车符。

            \t 匹配一个制表符。

            . 匹配除 "\n" 之外的任何单个字符。要匹配包括 '\n' 在内的任何字符 

            \b实例：张三 张三丰 李四 李四光 张无忌 陈六 张三 张三 丰 张三杰 丰张三 张三


        7-6、元字符应用（数字、字符提取）
            Sub 提取数字()
            Set regx = CreateObject("vbscript.regexp")
            With regx
                .Global = True
                .Pattern = "\D"
                For Each Rng In [a1:a4]
                    Cells(Rng.Row, 2) = .Replace(Rng, "")
                Next
            End With
            End Sub

            Sub 提取字符()
            Set regx = CreateObject("vbscript.regexp")
            With regx
                .Global = True
                .Pattern = "\w"
                For Each Rng In [a1:a4]
                    Cells(Rng.Row, 2) = .Replace(Rng, "")
                Next
            End With
            End Sub


            Sub 规范格式()
            Set regx = CreateObject("vbscript.regexp")
            With regx
                .Global = True
                .Pattern = "\s"
                For Each Rng In [a1:a4]
                    Cells(Rng.Row, 2) = .Replace(Rng, "-")
                Next
            End With
            End Sub



        7-7、元字符之量词
            ? 匹配前面的子表达式零次或一次。
            + 匹配前面的子表达式一次或多次。
            * 匹配前面的子表达式零次或多次。
            {n} n 是一个非负整数。匹配确定的 n 次。
            {n,} n 是一个非负整数。至少匹配n 次。
            {n,m} m 和 n 均为非负整数，其中n <= m。


            测试数据：
            www.baidu.com
            www.51zxw.net
            wwww.163..com
            wwwwww.qq.com
            w.haohao.cn
            ww.uu.net
            xuexi.cc




        7-8、元字符之量词实例
            Sub 提取内容()
            Set regx = CreateObject("vbscript.regexp")
            With regx
                .Global = True
                .Pattern = "\S+"
                For Each Rng In [b1:b4]
                    Set mat = .Execute(Rng)
                    For Each m In mat
                        y = y + 1
                        Cells(Rng.Row, y + 2) = m
                    Next
                        y = 0
                Next
            End With
            End Sub



            Sub 规范符号()
            Set regx = CreateObject("vbscript.regexp")
            With regx
                .Global = True
                .Pattern = "-{2,}"
                For Each Rng In [a1:a6]
                    n = n + 1
                    Cells(n, "b") = .Replace(Rng, "--")
                Next
            End With
            End Sub




        7-9、分组
            '   (pattern)： 匹配 pattern 并获取这一匹配。
            '   x|y ：匹配 x 或 y。（可选元素）

            Sub 去除多余的词()
            Set regx = CreateObject("vbscript.regexp")
            With regx
                .Global = True
                .ignorecase = True '大小写区分设置
                .Pattern = "(VBA){2,}"
                [b1] = .Replace([a1], "VBA")
            End With
            End Sub

            Sub test2()
            Set regx = CreateObject("vbscript.regexp")
            With regx
                .Global = True
                .ignorecase = True
                .Pattern = "经理|总裁|董事长"
                For Each Rng In [a2:a9]
                    n = n + 1
                    Cells(n + 1, "b") = .Replace(Rng, "高管")
                Next
            End With
            End Sub

            Sub test3()
            Set regx = CreateObject("vbscript.regexp")
            With regx
                .Global = True
                .Pattern = "(张|李).*(平|明)"
                For Each Rng In [a1:a9]
                    Set mat = .Execute(Rng)
                    For Each m In mat
                            n = n + 1
                            Cells(n, "b") = m
                    Next
                Next
            End With
            End Sub




        7-10、后向引用与非捕获
            '1.后向引用
            '(pattern) 匹配 pattern 并获取这一匹配
            '所获取的匹配可以从产生的 Matches 集合得到，
            '在VBScript 中使用 SubMatches 集合


            Sub test()
            Set regx = CreateObject("vbscript.regexp")
            With regx
                .Global = True
                .Pattern = "(\d{4}).+\1.+"
                For Each Rng In [b2:b10]
                    If .test(Rng) Then
                        n = n + 1
                        Cells(n + 1, "d") = Cells(Rng.Row, 1)
                    End If
                Next
            End With
            End Sub


            '2.非捕获分组
            '(?:pattern) 匹配 pattern 但不获取匹配结果，
            '也就是说这是一个非获取匹配，不进行存储供以后使用。
            '这在使用 "或" 字符 (|) 来组合一个模式的各个部分是很有用。
            '例如， 'industr(?:y|ies) 就是一个比 'industry|industries' 更简略的表达式。

            '作用：避免不必要的捕获操作，提高代码的匹配效率。
            '缺点：不美观，增加阅读难度。


        7-11、字符组（拆分单词） 
            '[]在中括号中选若干字符之一
            '[xyz] 字符集合。匹配所包含的任意一个字符。
            '[^xyz] 负值字符集合。匹配未包含的任意字符。
            '[a-z] 字符范围。匹配指定范围内的任意字符。
            '[^a-z] 负值字符范围。匹配任何不在指定范围内的任意字符。

            Sub test()
            Set regx = CreateObject("vbscript.regexp")
            With regx
                .Global = True
                .Pattern = "[a-zA-Z]+"
                For Each Rng In [a1:a3]
                Set mat = .Execute(Rng)
                For Each m In mat
                    n = n + 1
                    Cells(Rng.Row, n + 1) = m
                Next
                    n = 0
                Next
            End With
            End Sub




        7-12、字符组(去编号)
            '[]在中括号中选若干字符之一
            '[xyz] 字符集合。匹配所包含的任意一个字符。
            '[^xyz] 负值字符集合。匹配未包含的任意字符。
            '[a-z] 字符范围。匹配指定范围内的任意字符。
            '[^a-z] 负值字符范围。匹配任何不在指定范围内的任意字符。

            Sub 去编号()
            Set regx = CreateObject("vbscript.regexp")
            With regx
                .Global = True
                .Pattern = "[0-9]+-[0-9]+[、.]?"
                For Each Rng In [a1:a16]
                    Cells(Rng.Row, "b") = .Replace(Rng, "")
                Next
            End With
            End Sub




        7-13、首尾锚定
            '^ 匹配输入字符串的开始位置。
            '$ 匹配输入字符串的结束位置。
            Sub test()
            Set regx = CreateObject("vbscript.regexp")
            With regx
                .Global = True
                .Pattern = "^[A-Z]+\d+$"
                For Each Rng In [a1:a17]
                    Set mat = .Execute(Rng)
                    For Each m In mat
                    n = n + 1
                    Cells(n, 2) = m
                    Next
                Next
            End With

            End Sub




        7-14、循环多个正则表达式
            Sub 单词注释拆分() '执行多个正则表达式
            Set regx = CreateObject("vbscript.regexp")
            With regx
                .Global = True
                For Each ar In Array("[^a-z ]+", "[a-z ]+") '将多个正则表达式写在一个数组中
                    n = n + 1
                    .Pattern = ar '循环正则表达式
                    For Each Rng In [a2:a251]
                        Cells(Rng.Row, n + 1) = .Replace(Rng, "")
                    Next
                Next
            End With
            End Sub




        7-15、综合练习（重新排列）
            Sub 提取联系方式()
            Set regx = CreateObject("vbscript.regexp")
            With regx
                .Global = True
                .Pattern = "\d+-?\d+"
                For Each Rng In [a2:a5]
                    Set mat = .Execute(Rng)
                    For Each m In mat
                    n = n + 1
                        Cells(Rng.Row, n + 1) = m
                    Next m
                    n = 0
                Next Rng
            End With
            End Sub


            '\un 匹配 n，其中 n 是以四位十六进制数表示的 Unicode 字符。
            '汉字一的编码是\u4e00,最后一个代码是\u9fa5
            '一-龢

            Sub 重新组合()
            Set regx = CreateObject("vbscript.regexp")
            With regx
                .Global = True
                .Pattern = "[0-9]+.+[\.?]"
                For Each Rng In Sheet3.[a1:a100]
                    Set mat = .Execute(Rng)
                    For Each m In mat
                        n = n + 2
                         Cells(-1 + n, 1) = m
                    Next
                Next
            End With
            n = 0
            With regx
                .Global = True
                .Pattern = "[一-龢]+.+[。？！]"
                For Each Rng In Sheet3.[a1:a100]
                    Set mat = .Execute(Rng)
                    For Each m In mat
                        n = n + 2
                        Cells(n, 1) = m
                    Next
                Next
            End With
            End Sub




        7-16、零宽断言（有条件添加修改记录）
            Sub test()
            Set regx = CreateObject("vbscript.regexp")
            With regx
                .Global = True
                .Pattern = "(?=[川吉云粤])"
                For Each Rng In [a2:a10]
                  Cells(Rng.Row, 2) = .Replace(Rng, "(中)")
                Next
            End With
            End Sub




        7-17、正向零宽断言（汇总凌乱的开销记录）
            Sub 实例一()
            With CreateObject("vbscript.regexp")
                .Global = True
                .Pattern = "：(?=副?总)"
                For Each Rng In [a1:a7]
                    Cells(Rng.Row, 2) = .Replace(Rng, "：(高管)")
                Next
            End With
            End Sub



            Sub 实例二()
            With CreateObject("vbscript.regexp")
                .Global = True
                .Pattern = "\d+\.?\d?(?=[元块])"
                For Each Rng In [b2:b6]
                    For Each m In .Execute(Rng)
                        n = n + m * 1
                    Next
                    Cells(Rng.Row, "c") = n
                    n = 0
                Next
            End With
            End Sub





        7-18、负向零宽断言（给单词加分隔符）
            Sub test()
            With CreateObject("vbscript.regexp")
                .Global = True
                .Pattern = "(?!^)(?=[a-z])"
                For Each Rng In [a1:a11]
                    Cells(Rng.Row, 2) = .Replace(Rng, "-")
                Next
            End With
            End Sub




        7-19、懒惰与贪婪模式（乱中取目录）
            '前面我们已过知道"?"有三种：
            '1 是量词{0,1}
            '2 是非捕获型的匹配模式(?:)
            '3 是环视结构(?=)(?!)


            '今天学习第4种作用：

            '当该字符紧跟在任何一个其他限制符 (*, +, ?, {n}, {n,}, {n,m}) 后面时是懒惰模式
            '懒惰模式：尽可能少的匹配所搜索的字符串
            '贪婪模式：尽可能多的匹配所搜索的字符串（默认模式）
            '
            '
            Sub test()
            With CreateObject("vbscript.regexp")
                .Global = True
                .Pattern = "第\d+章.*?[一-龢]+.+?\d+"
                Set mat = .Execute([a1])
                For Each m In mat
                    n = n + 1
                    Cells(n + 1, "c") = m
                Next
            End With
            End Sub




        7-20、正则表达式属性（计算上班时间）
            Sub test()
            Set Rng = Range("a1:a" & [a65536].End(xlUp).Row)
            Set regx = CreateObject("vbscript.regexp")
            With regx
                .Global = True
                .Pattern = "\d+:\d+"
                For Each rn In Rng
                    Set mat = .Execute(rn.Value)
                    Cells(rn.Row, 2) = (CDate(mat(1).Value) - CDate(mat(0).Value)) * 24
                Next
            End With
            End Sub




        7-21、分组的妙用
            Sub 捕获分组值1()
                Set regx = CreateObject("vbscript.regexp")
                With regx
                    .Global = True
                    .Pattern = "([一-龢]{3,}) (\d+人)"
                    Set mat = .Execute([a1])
                    For Each m In mat
                        n = n + 1
                        Cells(n + 1, 3) = .Replace(m.Value, "$1")
                        Cells(n + 1, 4) = .Replace(m.Value, "$2")
                    Next
                End With
                End Sub

                Sub 捕获分组值2()
                Set regx = CreateObject("vbscript.regexp")
                With regx
                    .Global = True
                    .Pattern = "([一-龢]{3,}) (\d+人)"
                    Set mat = .Execute([a1])
                    For i = 0 To mat.Count - 1
                        Cells(i + 2, 5) = mat(i).submatches(0)
                        Cells(i + 2, 6) = mat(i).submatches(1)
                    Next
                End With
                End Sub




        7-22、分组运用（提取身份证信息）
            Sub 提取()
            n = 1
            With CreateObject("vbscript.regexp")
                .Global = True
                .Pattern = "(\S+) (\S+) (\S) (\d+)(( \S+){1,3})"
                Set mat = .Execute(Sheet3.[a1])
                For Each m In .Execute(Sheet3.[a1])
                    n = n + 1
                    Cells(n, 1) = .Replace(m, "$1")
                    Cells(n, 2) = .Replace(m, "$2")
                    Cells(n, 3) = .Replace(m, "$3")
                    Cells(n, 4) = .Replace(m, "$4")
                    Cells(n, 5) = .Replace(m, "$5")
                Next
            End With
            End Sub




        7-23、正则表达式总结 
            1.EXCEL里常用的几个正则表达式 
             ^/d+$ 　　//非负整数（正整数 + 0） 
             ^[0-9]*[1-9][0-9]*$ 　　//正整数 
             ^((-/d+)|(0+))$ 　　//非正整数（负整数 + 0） 
             ^-[0-9]*[1-9][0-9]*$ 　　//负整数 
             ^-?/d+$ 　　　　//整数 
             ^/d+(/./d+)?$ 　　//非负浮点数（正浮点数 + 0） 
             ^(([0-9]+/.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*/.[0-9]+)|([0-9]*[1-9][0-9]*))$ 　　//正浮点数 
             ^((-/d+(/./d+)?)|(0+(/.0+)?))$ 　　//非正浮点数（负浮点数 + 0） 
             ^(-(([0-9]+/.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*/.[0-9]+)|([0-9]*[1-9][0-9]*)))$ 　　//负浮点数 
             ^(-?/d+)(/./d+)?$ 　　//浮点数 
             ^[A-Za-z]+$ 　　//由26个英文字母组成的字符串 
             ^[A-Z]+$ 　　//由26个英文字母的大写组成的字符串 
             [^a-z+$]  '由26个英文字母的小写组成的字符串 
              [^A-Za-z0-9]+$ 　　‘由数字和26个英文字母组成的字符串 
             ^/w+$ 　　//由数字、26个英文字母或者下划线组成的字符串 
             ^[/w-]+(/.[/w-]+)*@[/w-]+(/.[/w-]+)+$ 　　　　//email地址 
             ^[a-zA-z]+://(/w+(-/w+)*)(/.(/w+(-/w+)*))*(/?/S*)?$ 　　//url 
            /^(d{2}|d{4})-((0([1-9]{1}))|(1[1|2]))-(([0-2]([1-9]{1}))|(3[0|1]))$/ // 年-月-日 
            /^((0([1-9]{1}))|(1[1|2]))/(([0-2]([1-9]{1}))|(3[0|1]))/(d{2}|d{4})$/ // 月/日/年 
             ^([w-.]+)@(([[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.)|(([w-]+.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(]?)$  //Emil 
             (d+-)?(d{4}-?d{7}|d{3}-?d{8}|^d{7,8})(-d+)?  //电话号码 
             ^(d{1,2}|1dd|2[0-4]d|25[0-5]).(d{1,2}|1dd|2[0-4]d|25[0-5]).(d{1,2}|1dd|2[0-4]d|25[0-5]).(d{1,2}|1dd|2[0-4]d|25[0-5])$  //IP地址 
            匹配中文字符的正则表达式： [^/u4e00-/u9fa5] 
            匹配双字节字符(包括汉字在内)：[^/x00-/xff] 
            匹配空行的正则表达式：/n[/s| ]*/r 
            匹配HTML标记的正则表达式：/<(.*)>.*<///1>|<(.*) //>/ 
            匹配首尾空格的正则表达式：(^/s*)|(/s*$) 
            匹配Email地址的正则表达式：/w+([-+.]/w+)*@/w+([-.]/w+)*/./w+([-.]/w+)* 
            匹配网址URL的正则表达式：^[a-zA-z]+://(//w+(-//w+)*)(//.(//w+(-//w+)*))*(//?//S*)?$ 
            匹配帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]{4,15}$ 
            匹配国内电话号码：(/d{3}-|/d{4}-)?(/d{8}|/d{7})? 
            匹配腾讯QQ号：^[1-9]*[1-9][0-9]*$ 

            2.学习正则表达式要像学习函数一样，从不同的角度去写，争取一种匹配多种方法。这样才能提高我们的正则水平。

            3.什么时候用正则表达式：数据杂乱的无规律的时候。正则是最好的解决方法。

            4.挑一款适合你的正则表达式测试工具。

            5.正则表达多不是一门语言，而是一种艺术。

第八章：VBA自定义函数
8-1、自定义函数基础(小试牛刀)
    '自定义函数：顾名思义，就是自己定义的函数。
    '为什么使用自定义函数：exce内置了很多有用的函数。但仍无法满足工作需求。
    '自定义函数的作用：简化复杂的公式。可以和工作表函数相互嵌套使用
    '
    '
    ' Function 函数名(参数1,参数2....)
    '   代码
    '   函数名=代码执行的结果
    ' End Function
        
    '

    '1.函数名称可能有函数，也可以像now,today,rand等函数一样不需要任何参数
    Public Function stname()
    stname = ActiveSheet.Name '返回当前工作表名
    End Function


    Public Function wbname()
    wbname = ThisWorkbook.Name '返回工作簿名
    End Function

    '有参数的自定义函数
    Function nas(num As Integer) '提取工作表名或工作簿名
        If num = 0 Then
            nas = ActiveSheet.Name
        ElseIf num = 1 Then
            nas = ThisWorkbook.Name
        End If
    End Function


    Public Function stname1()
    stname1 = thisworkSheet.Name '返回当前工作表名
    End Function



8-2、自定义函数的调用与存放位置

    '1.自定义工作函数的调用

    Function wbname()
    wbname = ActiveWorkbook.Name
    End Function


    Function wbnames()
    i = InStr(wbname, ".xls") '调用自定义的工作表函数
    j = Left(wbname, i - 1) '调用自定义的工作表函数
    wbnames = j
    End Function

    '2.自定义工作表函数的编写与运用范围
    '
    '自定义工作表函数的代码只能编写在：标准模块中，不能在工作表中或thisworkbook中
    '到目前为止我们编写的自定义函数只能在当前工作簿运行。要在所有工作簿中运行则：
    'A.将编写在标准模块中的自定义函数代码保存为：加载宏。
    'B.将加载的宏保持运用即可
    '
    '提示：与应用程序事件程序的操作方法相似

8-3、自定义函数小实例（等级函数）

    Function staddress(选择区域 As Range, 引用方式 As Integer)
    If 引用方式 = 1 Then
    staddress = 选择区域.Address(1, 1)
    ElseIf 引用方式 = 2 Then
        staddress = 选择区域.Address(0, 0)
    End If
    End Function


    Function 等级(单元格 As Range, 优 As Integer, 良 As Integer, 中 As Integer)
    If 单元格 >= 优 Then
        等级 = "优"
    ElseIf 单元格 >= 良 Then
        等级 = "良"
    ElseIf 单元格 >= 中 Then
        等级 = "中"
    Else
        等级 = "差"
    End If
    End Function


8-4、自定义函数-返回不重复随机数（结果是数组）
    Function sjs(最小值 As Integer, 最大值 As Integer, 所需个数 As Integer)
    Application.Volatile
    Set d = CreateObject("scripting.dictionary")
    Do
        i = Application.RandBetween(最小值, 最大值)
        d(i) = ""
    Loop Until d.Count = 所需个数
        sjs = d.keys
    End Function

    Sub dd()
    Set d = CreateObject("scripting.dictionary")
    Do
        i = Application.RandBetween(1, 9)
        d(i) = ""
    Loop Until d.Count = 4
        sj = d.keys
    End Sub



8-5、自定义函数（参数默认值设置）
    Function celljoin(区域 As Range, Optional 合并符 As String = "-")
    arr = Application.Transpose(Application.Transpose(区域))
    celljoin = Join(arr, 合并符)
    End Function



    Function 去除(rng As Range, Optional shuzi As Integer = 2)
    Set regx = CreateObject("vbscript.regexp")
    With regx
            .Global = True
        If shuzi = 0 Then
            .Pattern = "\d" '去数字
        ElseIf shuzi = 1 Then
            .Pattern = "[a-zA-Z]" '去字母
        ElseIf shuzi = 2 Then
            .Pattern = "[一-龢]" '去汉字
        End If
            去除 = .Replace(rng, "")
    End With
    End Function


8-6、自定义函数（参数不定）
    Function jia(ParamArray num())
    For Each n In num
        m = m + n
    Next
        jia = m
    End Function



    Function joins(ParamArray arr())
    For Each ar In arr
        For Each a In ar
        txt = txt & a.Value
        Next
    Next
    joins = txt
    End Function
    '注意：
    '1.如果参数不定，那么不能指定参数的数据类型
    '2.如果有不定参数，不定参数一定要写在最后。
    '
    '


8-7、自定义函数实例-身份证信息提取

8-8、自定义函数实例-单元颜色求和（字典+自定义函数）

8-9、自定义函数实例-反转字符与数字求和（正则+自定义函数）

8-10、自定义函数实例-提取不重复值（字典+正则+自定义函数） 


    2010_第10章：VBA对话框操作
        10-1、消息框基础

            常量  常量值 说明
            vbOKOnly                0       只显示“确定”按钮（缺省值）
            VbOKCancel              1       显示“确定”和“取消”按钮
            VbAbortRetryIgnore      2       显示“终止”、“重试”和“忽略” 按钮
            VbYesNoCancel           3       显示“是”、“否”和“取消”按钮
            VbYesNo                 4       显示“是”和“否”按钮
            VbRetryCancel           5       显示“重试”和“取消”按钮
            VbCritical              16      显示“错误信息”图标
            VbQuestion              32      显示“问号”图标
            VbExclamation           48      显示“警告消息”图标
            VbInformation           64      显示“通知消息”图标
            vbDefaultButton1        0       第一个按钮是缺省值（缺省设置）
            vbDefaultButton2        256     第二个按钮是缺省值
            vbDefaultButton3        512     第三个按钮是缺省值
            vbDefaultButton4        768     第四个按钮是缺省值
            vbApplicationModal      0       应用程序强制返回；应用程序一直被挂起，直到用户对消息框作出响应才继续工作
            vbSystemModal           4096    系统模式：在用户响应消息框前，所有应用程序都被挂起。
            vbMsgBoxHelpButton      16384   将Help按钮添加到消息框
            VbMsgBoxSetForeground   65536   指定消息框窗口作为前景窗口
            vbMsgBoxRight           524288  文本为右对齐
            vbMsgBoxRtlReading      1048576 指定文本应为在希伯来和阿拉伯语系统中的从右到左显示


            'm01
            '信息提示框；message box
            'MsgBox 函数
            '在对话框中显示消息

            Sub test()
            MsgBox "欢迎学习VBA^_^"
            End Sub

            'MsgBox(prompt[, buttons] [, title] [, helpfile, context])

            'prompt:必需的。字符串表达式，作为显示在对话框中的消息。

            'Buttons 可选的。数值表达式是值的总和，指定显示按钮的数目及形式，使用的图标样式，缺省按钮是什么以及消息框的强制回应等。

            'Title 可选的。在对话框标题栏中显示的字符串表达式。

            'Helpfile 可选的。字符串表达式，识别用来向对话框提供上下文相关帮助的帮助文件。

            'Context 可选的。数值表达式，由帮助文件的作者指定给适当的帮助主题的帮助上下文编号。




        10-2、MSGBOX第二参数详解
            'Buttons:在对话框中显示消息，等待用户单击按钮，
            '并返回一个 Integer 告诉用户单击哪一个按钮。

            '第一组值 (0–5) 描述了对话框中显示的按钮的类型与数目
            Sub 显示按钮的数目及形式()
            For i = 0 To 5
            MsgBox "Buttons值：" & i, i, "温馨提示^_^"
            Next
            End Sub

            '第二组值 (16, 32, 48, 64) 描述了图标的样式
            Sub 图标样式()
            For i = 16 To 64 Step 16
            MsgBox "图标样式值：" & i, i, "温馨提示^_^"
            Next
            End Sub

            '第三组值 (0, 256, 512,768) 说明哪一个按钮是缺省值
            Sub 缺省按钮()
            For i = 0 To 768 Step 256
            n = n + 1
            MsgBox "第" & n & "个按钮是缺省值：" & i, vbMsgBoxHelpButton + 3 + i + 16, "温馨提示^_^"
            Next
            End Sub
            '而第四组值 (0, 4096,16384,65536,524288,1048576) 则决定消息框的强制返回性
            Sub 消息框的强制返回性()
            arr = Array(Array(0, 4096, 16384, 65536, 524288, 1048576), Array("应用程序强制返回；应用程序一直被挂起，直到用户对消息框作出响应才继续工作。", "系统强制返回；全部应用程序都被挂起，直到用户对消息框作出响应才继续工作。", "将Help按钮添加到消息框", "指定消息框窗口作为前景窗口", "文本为右对齐", "指定文本应为在希伯来和阿拉伯语系统中的从右到左显示"))
            For i = 0 To 5
            MsgBox arr(1)(i), arr(0)(i), "第" & i + 1 & "个值：" & arr(0)(i)
            Next
            End Sub




        10-3、MSGBOX返回值
            Sub test() '获取返回值的方法
            i = MsgBox("你好", vbAbortRetryIgnore)
            End Sub

            Sub 向单元格中录入数据() '实例一
            i = Now
            j = MsgBox("要将当前日期：" & i & "写入单元格吗？", vbOKCancel)
            If j = 1 Then
                Cells(1, 1) = i
            End If
            End Sub

            '实例二:sheet3工作表隐藏设置




        10-4、InputBox基础与区别
            'inputbox函数与方法

            '1.区别一：外观区别
            'InputBox 函数
            '在一对话框来中显示提示，等待用户输入正文或按下按钮，并返回包含文本框内容的 String。

            'Application.InputBox 方法
            '显示一个接收用户输入的对话框。返回此对话框中输入的信息。
            '------------------------------------------------------------------------------------------

            Sub test1()
            sr = InputBox("请输入内容！") '函数
            sr = Application.InputBox("请输入内容！") '方法
            End Sub

            '------------------------------------------------------------------------------------------

            '2.参数区别
            'inputbox函数与方法的主要区别:

            '       InputBox(prompt[, title] [, default] [, xpos] [, ypos] [, helpfile, context]) 函数
            '表达式.InputBox(Prompt, Title, Default, Left, Top, HelpFile, HelpContextID, Type) 方法
            '主要区别：方法比函数多了一个参数(type-指定返回的数据类型。如果省略该参数，对话框将返回文本。).


            '3.按扭返回值区别

            Sub test2()
            hs = InputBox("请输入内容！") '函数
            ff = Application.InputBox("请输入内容！") '方法
            End Sub
            '小结：函数取消按钮返回值"",而方法是false




        10-5、InputBox实例(用户与密码校验)
            Sub test()
            1:
            n = n + 1
            If n > 3 Then Exit Sub
            user = InputBox("请输入用户名", "用户")
            If user = "" Then MsgBox "用户名不能为空": GoTo 1
            Set yh = Sheet1.Range("a:a").Find(user, , , xlWhole)
            'MsgBox yh.Offset(0, 1).Value
            If yh Is Nothing Then
            GoTo 1
            End If

            2:
            m = m + 1
            If m > 3 Then Exit Sub
            pass = InputBox("请输入密码", "密码")
            If pass = "" Then MsgBox "密码不能为空": GoTo 2
            If pass * 1 <> yh.Offset(0, 1).Value Then
            GoTo 2
            End If
            MsgBox "登录成功"
            End Sub




        10-6、InputBox方法Type参数详解(制作通用控件的好方法) 
            '   值      含义
            '   0       公式
            '   1       数字
            '   2       文本 (字符串)
            '   4       逻辑值（True 或 False）
            '   8       单元格引用，作为一个 Range 对象
            '   16      错误值，如 #N/A
            '   64      数值数组


            Sub test()
             ff = Application.InputBox("", "请输入公式", Type:=8)
            End Sub


            Sub test2() '可以比selection更方便选择数据
            ff = Application.InputBox("", "选择区域", Type:=8)
            End Sub

            Sub 筛选不重复值()
            On Error GoTo 100
            Dim d As Object, cf
            Set d = CreateObject("scripting.dictionary")
            qy = Application.InputBox("", "选择要进行不重复筛选的区域", , , , , , 8)
            For Each cf In qy
                d(cf) = ""
            Next
                Set ff = Application.InputBox("", "要放置的区域", , , , , , 8)
                ff.Resize(d.Count) = Application.Transpose(d.keys)
            100:
            End Sub

    2010_第13章：Ribbon功能区(DIY插件)
        13-1、自定义功能区的应用（演示）
            1.2007版以上的excel，最大的改变，就是菜单的显示方式
            2.简化Office界面，使界面整洁、美观、丰富、一目了然
            3.以后也不会有那个瀑布式下拉列表样式的菜单。
            4.通过前面章节的学习，出现在我们面前一个很重要的问题（开发的插不通用）
            5.只能给自己用，如果想开发通用控件，得提供一个操作的接口。
            6.我们则通过要订制功能区一样的功能。
            7.怎么自定义订制功能区就是我们这章所要学的内容
            8.看看学完本章后，我们要达到的目的。（演示）




        13-2、解析excel 2010文件

            解析EXCEL2010文件
            1.一个excel文件实际上就是一个压缩文件。
            2.而这个压缩包中的文件，基本上都是由XML文件组成。
            3.演示将excel解压出来，做后续分析。
            4.分析excel文件结构
            _rels文件夹：
            Id:为任意字符串，在.rels文件中必须是唯一的
            Type:表示关系的类型
            Target:指定包含关系的目标的文件夹和文件。
            docProps文件夹：包含各种XML文件，描述文件属性和应用程序设置。
            app.xml和core.xml两个文件中包含着：创建者的名字、修改的和创建的日期等。
            xl文件夹：包含文件的核心部分。
            根据工作簿中的内容，该文件夹中含有一些子文件夹，还含工作簿设置的XML文件。
            如果工作簿中含有VBA代码，那么文件夹中还有以bin为扩展名的二进制文件。
            Content_Types.xml:列出了包括在Excel文件程序包中其它部件的内容类型。




        13-3、认识功能区Ribbon

            ribbon      >   功能区
            tabs        >   选项卡(标签)集合
            tab         >   选项卡(标签)
            group       >   分组
            controls    >   控件




        13-4、代码自定义功能区

            自定义功能区操作步骤：                         
            (1)创建一个名为customUI的文件夹                           
            (2)customUI文件夹中,创建一个名为customUI.xml的文件,写入XML代码（添加自定义功能区）                         
            (3)创建一个名为demo的工作簿。                          
            (4)添加customUI文件夹到demo工作簿文件中（压缩文件方式打开添加）。                            
            (5)修改.rels文件夹中的.rels文件（和customUI文件夹的联系）                         
            (6)双击打开demo工簿！成功！                           
                                        
                                        
                                        
            (2)customUI文件夹中,创建一个名为customUI.xml的文件,写入以下XML代码（添加自定义功能区）                           
                                        

            <?xml version="1.0" encoding="gbk" ?>
            <customUI xmlns="http://schemas.microsoft.com/office/2006/01/customui">
                <ribbon startFromScratch="false">
                    <tabs>
                        <tab id="mytab1"
                            label="tiAdds"
                            insertBeforeMso="TabHome">
                            <group idMso="GroupFont">
                            </group>
                            <group idMso="GroupZoom">
                            </group>
                        </tab>
                    </tabs>
                </ribbon>
            </customUI>                 
                                        
            (4)添加customUI.xml文件到demo工作簿文件中。                         
            07以前版本是二进制文件存储文档，之后采用OpenXML文件格式标准，新的文件被包含在被压缩的XML格式中。                          
                                        
                                        
            (5)修改.rels文件夹中的.rels文件（和customUI文件夹的联系）                         
            <Relationship
             Id="customUIRelID"
             Type="http://schemas.microsoft.com/office/2006/relationships/ui/extensibility"
             Target="customUI/customUI.xml"/>   

            将这串代码放置在.rels文件中</Relationship>元素之前  

            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
            <Relationships xmlns="http://schemas.openxmlformats.org/package/2006/relationships"><Relationship Id="rId3" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties" Target="docProps/app.xml"/><Relationship Id="customUIRelID" Type="http://schemas.microsoft.com/office/2006/relationships/ui/extensibility" Target="customUI/customUI.xml"/><Relationship Id="rId2" Type="http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties" Target="docProps/core.xml"/><Relationship Id="rId1" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument" Target="xl/workbook.xml"/></Relationships>  




        13-5、初识RibbonX
            """
            Excel 2007/2010：单击“Office按钮（或文件菜单）→Excel选项（或选项）→信任中心”，单击“信任中心设置”按钮，选择“个人信息选项”， 在“文档特定设置”下取消选择“保存时从文件属性中删除个人信息”后确定。该选项仅对当前工作簿有效。另外，新建工作簿时该选项为灰色不可用，只有用“文 档检查器”检查了文档并删除了个人信息后该选项才可用。
            """

            1.RibbonX的定义    
            Ribbon(功能区):是excel 2010应用程序界面的一部分   
            RibbonX:自定义创建功能区组件的编程接口。通过接口定义如何在应用程序中显示自定义的功能区。    
                
            2.关于RibbonX 
            RibbonX使用简单易懂的可扩展的标识语言（XML）。    
            如果从事过网页设计，那么XML与HTML的语法结构是相同的，非常易习。 
            完整的自定义功能区：RibbobX(UI界面设计)+VBA(功能设计) 
                
            3.RibbonX的元素    
            选项卡（Tabs）   
            组（Groups）   
            控件（Controls）    
                
            3.RibbonX代码结构   
            <?xml version="1.0" encoding="GBK" standalone="yes" ?>
                <customUI xmlns="http://schemas.microsoft.com/office/2006/01/customui">
                    <ribbon>
                        <tabs>
                            <tab id="t1" label="我要自学网">
                                <group id="g1" label="VBA学习">
                                    <button id="b1"
                                            label="功能按钮"
                                            imageMso="Copy"
                                            size="large"
                                            onAction="回调程序" />
                                </group>
                            </tab>
                        </tabs>
                    </ribbon>
                </customUI>




        13-6、XML语法结构讲解

            1.XML前奏                         
            虽然XML语法结构简单。可能你学过HTML或XML。                          
            但我都默认为大家没学过。因为确实有同学没学过。                         
                                        
            2.XML定义                         
            "用于标记电子文件使其具有结构性的标记语言，可以用来标记数据、定义数据类型，
            是一种允许用户对自己的标记语言进行定义的源语言。"                           
                                        
            3.XML语法结构解析                         
            """
            1.XML元素是用尖括号围住的<>
            2.XML元素总是成对出现的<>…</>
            3.XML也有孤单的时候，但结构必须是：<tag     />
            4.XML元素的属性写法：属性名="属性值"
            5.XML中的元素属性位置没有顺序
            5.XML对大小写敏感，区分大小写。
            6.XML元素的包含关系能不乱。
            7.XML的注释写法:<!--注释语句-->
            8.XML代码的美化
            总结：XML的语法结构是严谨的。
            """

            <?xml version="1.0" encoding="GBK" standalone="yes" ?>
                <customUI xmlns="http://schemas.microsoft.com/office/2006/01/customui">
                    <ribbon>
                        <tabs>
                            <tab id="t1" label="myTool_1">
                                <group id="g1" label="toFond">
                                    <button id="g1b1"
                                            label="toSinmhei"
                                            <!--imageMso="Copy"-->
                                            size="large"
                                            onAction="回调程序" />
                                    <button id="g1b2"
                                            label="toGosic"
                                            <!--imageMso="Copy"-->
                                            size="large"
                                            onAction="回调程序" />                    </group>
                            </tab>
             
                            <tab id="t2" label="myTool_2">
                                <group id="g2" label="toFond">
                                    <button id="g2b1"
                                            label="toSinmhei"
                                            <!--imageMso="Copy"-->
                                            size="large"
                                            onAction="回调程序" />
                                    <button id="g2b2"
                                            label="toGosic"
                                            <!--imageMso="Copy"-->
                                            size="large"
                                            onAction="回调程序" />                    </group>
                            </tab>

                        </tabs>
                    </ribbon>
                </customUI>




        13-7、OpenXML架构元素(一)
        13-8、OpenXML架构元素(二)
        13-9、OpenXML架构元素(三)
        13-10、group元素-分组
        13-11、button元素-按钮

            <?xml version="1.0" encoding="gbk" ?>
            <customUI xmlns="http://schemas.microsoft.com/office/2006/01/customui">
                <ribbon startFromScratch="false">
                    <tabs>
                        <tab id="mytab1"
                            label="ÎÒÒª×ÔÑ§Íø×¨ÓÃ"
                            insertBeforeMso="TabHome">
                            <group id="group1" label="×Ô¶¨Òå·Ö×é">
                             <button id="but1"  

                        label="ÑéÖ¤" 
                        imageMso="AccessReportMore"
                        screentip="Êý¾ÝÑéÖ¤"
                        supertip="Èç¹ûÏëÊý¾ÝÑéÖ¤£¬¾ÍµãÕâ¸ö£¡"
                        onAction="ts"/>
                            </group>
                        </tab>
                    </tabs>
                </ribbon>
            </customUI>


        13-12、button元素-按钮（让控件运行起来）

            以按钮控件为准
            1. 给button元素加一个属性：onAction="tiaoshi"
            2. 找到该属性的回调签名（A-自己写, B-通过软件生成）
            3. 安装软件 Custom UI Editor
            4. 生成回调签名步骤
            5. 在VBA中写回调代码



        13-13、CallBacks-回调（点击控件访问网站）
        13-14、CallBacks-回调（让按钮产生变化）
        13-15、CallBacks-回调（让按钮产生变化）
                    13-16、给控件自定义图标
                    13-17、给控件自定义图标
                    13-18、动态变幻自定义图标
                    13-19、checkBox 元素-复选框(根据复选框状态录入数据)
                    13-20、editBox元素-文本编辑框
                    13-21、editBox元素-文本编辑框(较酷的用户名验证)
                    13-22、toggleButton元素-切换按钮
                    13-23、toggleButton元素-切换按钮(字母大小写切换按钮订制)
                    13-24、item元素-条目
                    13-25、comboBox元素-组合框
                    13-26、comboBox元素-组合框(利用组合框录入与筛选)
                    13-27、comboBox元素-组合框(动态填充组合框)
                    13-28、dropDown元素-下拉列表
                    13-29、Gallery元素-库(确实很酷)
                    13-30、Gallery元素-库(动态装载图片)

        13-31、menu元素-菜单
        13-32、menu元素-菜单 ( 定制系统登录和超链接) 
        13-31、menu元素-菜单
        13-32、menu元素-菜单 ( 定制系统登录和超链接)

                    13-33、splitButton元素-拆分按钮
                    13-34、splitButton元素-拆分按钮
                    13-35、dynamicMenu元素-动态菜单(动态获取单元格值为菜单项目)
                    13-36、dynamicMenu元素-动态菜单(动态获取单元格值为菜单项目)  
                    13-38、menuSeparator元素-菜单分割符 (动态变化的菜单标题)
                    13-39、separator元素-控件分隔线(动态显示分隔线)
                    13-40、box元素-控件框
                    13-41、dialogBoxLauncher元素-对话框启动器

        13-42、Ribbon控件综合运用（制作通用插件）
        13-43、Ribbon控件综合运用（制作登录界面） 
            1.怎么调用程序？   
            2.通用插件程序开发注意的细节。    
            3.加载宏定义成通用插件　       >   保存成加载宏文件（*.xlam）, 调用即可



















excel_2013_vba
    2013_第一章：不是编程的编程---宏
        1-3、熟悉编程环境（窗口）

            1.工程资源管理器 > 当前有哪些对象
            2.属性
            3.工具栏
                编辑
                标准
            ！显示变量：本地窗口




        1-4、代码调试的相关工具 

            1.代码调试语句
                1.运行过程/窗体（F5）
                2.逐句运行（F8）
                3.运行到光标处（ctrl+f8）
                4.断点设置（F9或单击）
                5.中断运行代码(ctrl+break)

            2.编辑器格式设置
                字体设置
                字号设置

            3.尝试一下程序编写
                Sub test()
                MsgBox "very good!"
                End Sub




        1-5、对象

            Option Explicit
            '生活的对象: 看得到摸得到的实体
            'excel中的对象是：看得到摸不到
            '经常应用的对象

            '--------------工作簿------------
                '以序号来表式：Workbooks (序号)
                '以文件名来表式：Workbooks ("工作簿名")
                '工作簿集合：Workbooks
                '当前工作簿：ThisWorkbook
                '活动工作簿：ActiveWorkbook


            '--------------工作表------------
                '用序号表示：WORKSHEETS(3)
                '用工作表名称表示：WORKSHEETS("工资表")
                '用工作表代码名称表示：Sheet1、Sheet2....
                '活动工作表：ActiveWorkbook


            '--------------单元格区域------------
                '单元格的简化表示方法：[a1:b1]
                '标准表示方法：range("a1:b1")
                '单个单元格表示方法：cells(2,3)
                '活动单元格表示方法：activecell
                '所选区域表法方法：selection
                '




        1-6、属性 

            '1.属性：指的是对象自己本身具有的特质

            '2.常见对象属性实例:
                Sub test()
                MsgBox Application.Name
                MsgBox Application.Version
                MsgBox Workbooks("1.6 ÊôÐÔ").Path
                MsgBox Worksheets(1).Name
                MsgBox ActiveCell.Height
                MsgBox ActiveCell.Value
                End Sub

            Sub 常见属性()
                MsgBox ActiveCell.RowHeight
                AcitiveCell.Value=200   # 属性修改
                ActiveCell.RowHeight = 40
                Selection.RowHeight = 40
                End Sub




        1-7、方法

            '1.方法：支队对象做出来的操作动作

            '2.实例：
                Sub test()
                Worksheets.Add
                ActiveCell.Clear
                Sheets("Sheet2").Select
                Sheets.Add
                Selection.ClearContents
                End Sub

            '3.对于不知道的操作(方法)，采用录制宏的方法来获取并修改




        1-8、编程精灵（变量与常理）

            '1.变量源于数学，是计算机语言中能储存计算结果或能表示值抽象概念。变量可以通过变量名访问。

            '2.由于变量让你能够把程序中准备使用的每一段数据都赋给一个简短、易于记忆的名字，因此它们十分有用。

            '3.变量命名时，尽量不要使用无意义的字母。尽量能描述变量的作用。

            '4.赋值

            '5.常量
                Sub test()
                Const pai = 3.1415926
                MsgBox 2 * pai * 14
                End Sub




        1-9、数据类型

            '1.变量可以接纳各种不同的数据类型             
                数据类型        注释  占用空间    简写  数值范围
                Byte            字节  1字节      0–255
                Boolean         布尔  2字节     True 或 False
                Integer         整数  2字节 %   -32,768 至 32,767
                Long            长整型 4 字节    &   -2,147,483,648 到 2,147,483,647
                Single          单精度浮点   4 字节    !    -3.402823E38 到 -1.401298E-45（负值）和 1.401298E-45 到 3.402823E38（正值）
                Double          双精度浮点   8 字节    #   负值范围从 -1.79769313486231E308 到 -4.94065645841247E-324，正值范围从 4.94065645841247E-324 到 1.79769313486232E308
                Date            日期  8 字节        从 100 年 1 月 1 日到 9999 年 12 月 31 日的日期以及从 0:00:00 到 23:59:59 的时间
                String(变长）  字符串长度       $   20 亿 (2^31) 个字符
                String(定长）  字符串长度           1 到约 6.4 万 (2^16) 个字符
                Object         对象  4 字节        使用设置语法（声明为对象的变量）可对其分配任何对象引用
                Variant     变体          是一种可包含除定长的 String 数据外的任何类型的数据的特殊数据类型。

            '2.实例
                Sub test()
                Dim y As Workbook, x As Worksheet, z As Range
                Dim y As Byte, z As Integer
                Dim y As String * 3
                Set z = [a1]
                End Sub

                Integer >   %
                Long    >   &
                Single  >   !
                Double  >   #
                String  >   $
                String  >   String * 3 #定长、只取起始3位

                #对象
                Dim y As Workbook
                Dim x As Worksheet
                Dim z As Range
                Set z = [a1]    # 对象赋值必须前面加Set




        1-10、常用运算符 

                '1.算术运算符
                    '求幂    ^
                    '负号    -
                    '乘  *
                    '除  /
                    '整除    \
                    '求余    Mod
                    '加  +
                    '减  -

                        Sub 算术运算符()
                        MsgBox 7 Mod 5
                        End Sub

                '2.连接运算符
                    '字符串连接  &
                    '字符串连接  +
                        Sub 连接运算符()
                        Dim string1$, string2$
                        string1 = "a"
                        string2 = "b"
                        MsgBox "1" + "2"
                        End Sub

                '3.比较运算符
                    '描述 符号
                    '等于    =
                    '不等于  <>
                    '小于    <
                    '大于    >
                    '小于等于    <=
                    '大于等于    >=

                        Sub 比较运算符()
                        MsgBox 1 > 0
                        End Sub

                '4.逻辑运算符
                    '描述 符号
                    '逻辑非  Not   > 取反的意思
                    '逻辑与  And
                    '逻辑或  Or

                        Sub 逻辑运算符()
                        MsgBox Not 1 > 0 Or 3 > 4 Or 7 = 6
                        End Sub


        1-11、条件判断语句IF ELSE（1） 

            Sub test()
            Dim num As Integer
            num = 50
            If num >= 60 Then
            MsgBox "及格"
            Else
            MsgBox "不及格"
            End If

            End Sub




        1-12、条件判断语句IF ELSE（2）

            Sub test()
            If [a1].Value >= 90 Then
                MsgBox "优"
            ElseIf [a1].Value >= 80 Then
                MsgBox "良"
            ElseIf [a1].Value >= 60 Then
                MsgBox "中"
            ElseIf [a1].Value < 60 Then
                MsgBox "差"
            End If
            End Sub




        1-13、条件判断语句IIF-函数法（3）
            
            Sub test()
            Dim n%
            n = 68
            MsgBox IIf(n >= 90, "优", IIf(n >= 80, "良", IIf(n >= 60, "中", "差")))
            End Sub




        1-14、条件判断语句SELECT-Case-单条件（4） 

            Sub test()
            Dim pad$
            0:
            pad = InputBox("请录入密码！")

            Select Case pad
            Case "888"
                MsgBox "密码正确，登录成功！"
            Case Else
                MsgBox "密码不正确！"
                GoTo 0
            End Select

            End Sub




        1-15、条件判断语句SELECT-Case-多条件（5）

            Sub test()
            Dim sr
            sr = InputBox("请输入一个季节：比如春、夏、秋、冬")
            Select Case sr
            Case "春"
                MsgBox "春天好美，万物苏醒！"
            Case "夏"
                MsgBox "夏天好热，万物烤死!"
            Case "秋"
                MsgBox "秋天荒凉，万物凋零！"
            Case "冬"
                MsgBox "冬天好冷,万物已睡！"
            Case Else
                MsgBox "你输入的不是季节。"
            End Select
            End Sub


            Sub test1()
            Dim sr%
            sr = InputBox("请输入分数")
            Select Case sr
            Case 90 To 100     # is > 90
                MsgBox "优"
            Case 80 To 89
                MsgBox "良"
            Case 60 To 79
                MsgBox "中"
            Case 0 To 59
                MsgBox "差"
            Case Else
                MsgBox "你输入的分数不对"
            End Select
            End Sub




        1-16、循环语句FOR NEXT-正真的应用从这里开始（1）

            Sub TEST()
            Dim num%
            For num = 1 To 5
                MsgBox "第" & num & "圈"
            Next num
            End Sub


            Sub 计算金额()
            Dim num%
            For num = 2 To 14
               Cells(num, 4) = Cells(num, 2) * Cells(num, 3)
            Next num
            End Sub




        1-17、循环语句FOR NEXT应用（密码验证）

            Sub test()
            Dim pas, i
            For i = 3 To 1 Step -1
            pas = InputBox("请输入密码")
                If pas = "123" Then
                    MsgBox "密码正确，登录成功！"
                    Exit For    #退出循环
               Else
                    MsgBox "你还有" & i & "次机会！"
               End If
            Next i
            End Sub

            Sub 密码验证()
            Dim num%
            For num = 3 To 1 Step -1
            If InputBox("请输入密码！") = "123" Then
                MsgBox "密码正确，登录成功！"
                End      #退出整个sub
            Else
                MsgBox "你还有" & num & "次机会！"
            End If
            Next num
            End Sub




        1-18、循环语句FOR NEXT嵌套应用

            Sub 乘法表()
            Dim num1%, num2%
            For num1 = 1 To 9
                For num2 = 1 To 9
                    If num2 > num1 Then
                    Exit For
                    Else
                    Cells(num1, num2) = num2 & "×" & num1 & "=" & num1 * num2
                    End If
                Next num2
            Next num1
            End Sub


            Sub test()
            Dim num1%, num2%
            For num1 = 1 To 9
                For num2 = 1 To 9
                    If num2 > num1 Then
                        Exit For
                    Else
                        Cells(num1, num2) = num2 & "×" & num1 & "=" & num1 * num2
                    End If
                Next num2
            Next num1
            End Sub




        1-19、循环语句FOR EACH NEXT基础 

            Sub test()
            '大多情况下针对以下集合
            'workbooks 当前打的开的所有工作簿
            'worksheets 指定工作簿下的所有工作表
            'range("a1:c6") 指定单元格格区域下的所有单元格
            Dim wb As Workbook, ws As Worksheet, rng As Range


            For Each wb In Workbooks
                MsgBox wb.Name
            Next wb


            For Each ws In Worksheets
                MsgBox ws.Name
            Next ws


            For Each rng In Range("a1:c3")
                MsgBox rng.Address & "=" & rng.Value
            Next rng

            End Sub





        1-20、循环语句FOR EACH NEXT应用

            Sub 计算提成()
            Dim rng As Range
            For Each rng In [b2:b9]
                rng.Offset(0, 1) = rng.Value * 0.1
            Next rng
            End Sub


            Sub 新建部门()
            Dim ws As Worksheet
            For Each ws In Worksheets
                If ws.Name = "财务部" Then End
            Next ws
                Worksheets.Add.Name = "财务部"
            End Sub




        1-21、循环语句DO LOOP基础 

            Sub test()
            Dim number%
            Do
            number = number + 1
                If number < 6 Then
                    MsgBox number
                Else
                    Exit Do
                End If
            Loop
            End Sub




        1-21、循环语句DO LOOP基础

            # 优点：不需要定义范围
            Sub 计算金额()
            Dim ros%
            ros = 1
            Do
                ros = ros + 1
                If Cells(ros, "a") = "" Then
                    Exit Do
                Else
                    Cells(ros, "d") = Cells(ros, "b") * Cells(ros, "c")
                End If
            Loop
            End Sub




        1-23、循环语句之UNTIL与WHILE

            Sub test()
            Dim number%
            'until 直到条件成立时，停止循环。
            'while 当条件成立时，则开始循环。
            Do
                number = number + 1
                MsgBox number
            Loop Until number >= 5       #也可以以写在 Do一行
            End Sub

            Sub test1()
            Dim number%
            'until 直到条件成立时，停止循环。
            'while 当条件成立时，则开始循环。
            Do While number < 6
                number = number + 1
                MsgBox number
            Loop Until
            End Sub




        1-24、循环语句之UNTIL与WHILE应用

            Sub 计算金额()
            Dim number%
            number = 1
            Do While Cells(number + 1, 2) <> ""
            number = number + 1
            Cells(number, 2).Offset(0, 2) = Cells(number, 2) * Cells(number, 2).Offset(0, 1)
            Loop
            End Sub




        1-25、循环语句总结

            for...next          >   数据循环                (step可以为负数，-1)

            for each ... next   >   主要针对集合或者数组

            do...loop           >   循环内容不确定           (while, until)


            Sub test()
            Dim num%, sr$
            Do While num <= 10
            num = num + 1
            sr = sr & "," & num
            Loop
            End Sub


        1-26、再谈运算符LIKE

            'like:用来比较两个字符串，返回值是逻辑值true或false
            '语法结构：result = string Like pattern
            '
            '   pattern 中的字符    符合 string 中的
            '   ？                          任何单一字符
            '   *                           零个或多个字符。
            '   #                           任何一个数字 (0–9)。
            '   [charlist]                charlist.中的任何单一字符
            '   [!charlist]               不在 charlist 中的任何单一字符。


            Sub test()
            Dim re
            re = "w4" Like "w[!0-5]"
            End Sub

            Sub test1()
            Dim re
            re = 123 Like "???"
            re = "淳安县西塘村123" Like "*县*村*"
            End Sub



        1-27、LIKE运算符的应用（2）

            Sub test()
            Dim tiaojian As Range, rng As Range, n%
            For Each tiaojian In [g2:g4]
                For Each rng In [b2:b19]
                    If rng.Value Like tiaojian.Value Then n = n + 1
                Next rng
                tiaojian(1, 2) = n
                n = 0
            Next tiaojian
            End Sub
            Sub 计算()
            Dim tj As Range, fs As Range, num%
            For Each tj In [g2:g4]
                For Each fs In [b2:b19]
                   If fs.Value Like tj.Value Then num = num + 1
                Next
                    tj(1, 2) = num
                    num = 0
            Next
            End Sub




        1-28、一种偏移两种方法（用属性获取区域offset）

            # offset计算方法（-2，-1, 0， 1， 2）
            Sub test()
            Range("b4").Select
            Range("b4")(5, 5).Select
            Range("b4").Offset(6, 6).Select
            End Sub


            Sub test1()
            Dim rng As Range
            For Each rng In [d2:d21]
                rng = rng(1, -1) * rng(1, 0)
            Next
            End Sub

            Sub test2()
            Dim rng As Range
            For Each rng In [d2:d21]
                rng = rng.Offset(0, -2) * rng.Offset(0, -1)
            Next
            End Sub




        1-29、单元格尺寸选择（RESIZE属性） 

            Sub 条件筛选()
            Dim rng As Range, n%
            For Each rng In [b2:b13]
                If rng.Value = "1班" Then
                    n = n + 1
                    Cells(n, "g").Resize(1, 5) = rng.Offset(0, -1).Resize(1, 5).Value
                End If
            Next rng
            End Sub



            Sub 筛选()
            Dim rng As Range, n%
            For Each rng In [b2:b13]
                If rng.Value = "2班" Then
                    n = n + 1
                    Cells(n + 1, "g").Resize(1, 5) = rng.Offset(0, -1).Resize(1, 5).Value
                End If
            Next rng
            [g1:k1] = [a1:e1].Value
            End Sub

            Sub test()
            Range("b4").Resize(3, 5).Select
            End Sub




        1-30、单元格尺寸选择（另类方法） 

            Sub test()
            Dim cell
            Range("b4").Range("a1:d7").Select
            Range("b4").EntireColumn.Select     # 选择所在列
            Range("b4").EntireRow.Select        # 选择所在行
            Set cell = Range("b4").EntireRow
            cell = Range("b4").EntireRow.Value

            End Sub

            Sub 条件筛选()
            Dim rng As Range, n%
            For Each rng In [b2:b13]
                If rng.Value = "1班" Then
                    n = n + 1
                    Cells(n, "g").Resize(1, 5) = rng.Offset(0, -1).Range("a1:e1").Value
                    Cells(n, "g").Resize(1, 5) = rng.EntireRow.Range("a1:e1").Value
                End If
            Next rng
            End Sub

            Sub test()
            Dim cell
            'Range("e13").Range("a1:d7").Select
            'Range("b4").EntireColumn.Select
            MsgBox Range("b4").Row
            End Sub





        1-31、单元格的并集（UNION） 

            Sub ti()
            [a1:c3].Select
            [a1:c3,e4:t12].Select
            range("a1:c3,e7:t9").Select
            Application.Union([a1:b3], [b2:d5]).Select
            End Sub

            Sub ti1()
            Dim rng, i, n
            Set rng = [a1]
            For i = 2 To 10 Step 2
            n = n + 1
            Set rng = Union(rng, Cells(i, 1))
            rng.Select
            Next
            End Sub

            Sub test()
            Dim rng As range, range As range
            For Each rng In [b2:b16]
                If rng.Value >= 80 Then
                    If range Is Nothing Then
                        Set range = rng
                    Else
                        Set range = Union(range, rng)
                    End If
                End If
            Next
            range.Select
            End Sub

            Sub test2()
            Dim rng As range, rngs As range
            For Each rng In [b2:b16]
            If rng.Value >= 80 Then
                If rngs Is Nothing Then
                Set rngs = rng
                Else
                Set rngs = Union(rngs, rng)
                End If
            End If
            Next
            rngs.Select
            End Sub


            Sub test1()
            Dim rng, i, n
            Set rng = [a1]
            For i = 2 To 10 Step 2
            n = n + 1
            Set rng = Union(rng, Cells(i, 1))
            MsgBox rng.Address
            Next
            End Sub




        1-32、会交集，不会焦急（INTERSECT） 

            Sub test()
            Dim rng1 As Range, rng2 As Range
            Dim rws As Range, cols As Range
            For Each rng1 In [a2:a9]
                If rng1.Value = [b13].Value Then
                    Set rws = rng1.EntireRow
                    Exit For
                End If
            Next
            For Each rng2 In [b1:g1]
                If rng2.Value = [b14].Value Then
                    Set cols = rng2.EntireColumn
                    Exit For
                End If
            Next
            [b15] = Intersect(rws, cols).Value
            End Sub

            Sub test2()
            Application.Intersect([a1:c10], [f4:f15]).Select
            End Sub

            Sub 查询()
            Dim rng1 As Range, rng2 As Range
            Dim rs As Range, cs As Range
            For Each rng1 In [a2:a9]
                If rng1.Value = [b13].Value Then
                    Set rs = rng1.EntireRow
                    Exit For
                End If
            Next

            For Each rng2 In [b1:g1]
                If rng2.Value = [b14].Value Then
                    Set cs = rng2.EntireColumn
                    Exit For
                End If
            Next

            [b15] = Intersect(rs, cs).Value

            End Sub




        1-33、动态获取单元格区域（CurrentRegion）

            Sub ti()
            Range("c4").CurrentRegion.Select
            End Sub

            Sub test()
            Dim rng As Range, n%, num%
            For Each rng In Intersect(Range("b3").CurrentRegion, [c:c])
                If rng.Value = "生产部" Then
                n = n + 1
                num = num + rng(1, 2).Value
                End If
            Next
                MsgBox "生产部的平均工资是：" & num / n
            End Sub

            Sub demo()
            Dim rngs As Range, rng As Range
            Dim num&, n%
            Set rngs = Range("b3").CurrentRegion
            For Each rng In Intersect([c:c], rngs)
                If rng.Value = "生产部" Then
                    num = num + rng(1, 2).Value
                    n = n + 1
                End If
            Next rng
            MsgBox "生产部的平均工资为:" & num / n
            End Sub




        1-34、动态获取单元格区域（UsedRange） 

            Sub ti()
            Dim rng As Range
            Set rng = ActiveSheet.UsedRange
            rng.Select
            End Sub

            Sub test() '计算三个月的总工资
            Dim rngs As Range, rng As Range, n&
            Set rngs = Sheet1.UsedRange
            For Each rng In Union(Intersect(rngs, [c:c]), Intersect(rngs, [g:g]), Intersect(rngs, [k:k]))
                n = n + Val(rng.Value)     # 可以将字符串转为0！！！
            Next
            MsgBox "三个月的总工资为：" & n
            End Sub

            Sub demo()
            Dim rngs As Range, rng As Range, num
            Set rngs = ActiveSheet.UsedRange
            For Each rng In Union(Intersect(rngs, [c:c]), Intersect(rngs, [g:g]), Intersect(rngs, [k:k]))
            num = num + Val(rng.Value)
            Next
            MsgBox num
            End Sub

            Sub tddd()
            MsgBox Val("实发工资")
            End Sub




        1-35、动态获取单元格区域（End） 
            Sub ti()'
                Selection.End(xlDown).Select  '向下 -4121
                Selection.End(xlUp).Select '向上 -4162
                Selection.End(xlToLeft).Select '向左 -4159
                Selection.End(xlToRight).Select '向右 -4161
            End Sub

            Sub 动态获取区域()
            Range("a1", Cells(Rows.Count, "d").End(xlUp)).Select
            End Sub




        1-36、END实例应用 

            Sub test()
            Dim rng As Range
            For Each rng In Range("a2", [a2].End(xlDown))
               rng(1, 22) = rng.End(xlToRight).EntireColumn.Range("a1").Value
            Next
            End Sub

            Sub 提取()
            Dim rng As Range
            For Each rng In Range([a2], [a2].End(xlDown))
               rng(1, 22) = rng.End(xlToRight).EntireColumn.Range("a1").Value
            Next
            End Sub




        1-37、VBA中使用EXCEL工作表函数（1） 

            # 是动态计算的！！！
            Sub ti()
            [f3] = "=B3+C3+D3+E3"
            [f4] = "=sum(b4:e4)"
            End Sub


            'VBA中使用工作表的公式公式
            Sub test1()
            Dim rng As Range
            For Each rng In [f3:f9]
            rng = "=B" & rng.Row & "+C" & rng.Row & "+D" & rng.Row & "+E" & rng.Row & ""
            Next
            End Sub
            Sub test2()
            Dim rng As Range
            For Each rng In Range("f3:f" & Cells(Rows.Count, 1).End(xlUp).Row)
            rng = "=sum(B" & rng.Row & ":E" & rng.Row & ")"
            Next
            End Sub





        1-38、VBA中使用EXCEL工作表函数（2） 

            Sub 汇总()
            Dim rng As Range
            For Each rng In Range("f2", [f2].End(xlDown))
                rng(1, 2) = "=COUNTIF(B:B,f" & rng.Row & ")"
                rng(1, 3) = "=sumIF(B:B,f" & rng.Row & ",c:c)"
                rng(1, 4) = "=averageIF(B:B,f" & rng.Row & ",d:d)"
            Next
            End Sub




        1-39、VBA中引用工作表函数  Application.WorksheetFunction

            Sub test()
            Dim rng
            For Each rng In [c2:c20]
            rng.Offset(, 1) = WorksheetFunction.CountIf([a:a], "*" & rng.Value & "*")
            Next
            End Sub

            Sub test1()
            MsgBox Application.WorksheetFunction.Sum([d:d])
            WorksheetFunction.SumProduct
            End Sub

            Sub 统计()
            Dim rng As Range
            For Each rng In Range("c2", [c2].End(xlDown))
            rng(1, 2) = WorksheetFunction.CountIf([a:a], "*" & rng.Value & "*")
            Next
            End Sub





        1-40、使用VBA中的函数  VBA.函数名

            Sub ti()
            MsgBox VBA.Left("abs", 2)
            End Sub

            Sub test()
            Dim rng As Range
            For Each rng In Range("b2", [b2].End(xlDown))
                rng(1, 2) = Left(rng, InStr(rng.Value, "/") - 1)
                rng(1, 3) = Mid(rng, InStr(rng.Value, "/") + 1, 9)
            Next
            End Sub

            Sub testsss()
            MsgBox Left("abc", 2)
            End Sub

            Sub 拆分()
            Dim rng As Range, sr%
            For Each rng In Range("b2", [b2].End(xlDown))
               sr = InStr(rng, "/")
               rng(1, 2) = Left(rng, sr - 1)
               rng(1, 3) = Mid(rng, sr + 1, 9)
            Next
            End Sub

    2013_第二章：单元格应用

        2-1、单元格的基础操作1（选择、插入、删除）

            Sub ¸隔行插入()
                Dim r%, rs$, rss$
                For r = 2 To [a1].End(xlDown).Row
                rs = rs & r & ":" & r & ","
                rss = Left(rs, Len(rs) - 1)
                Next
                Range(rss).Insert
                End Sub


                Sub ²åÈë()
                Dim rw%, sr$, ss
                For rw = 2 To WorksheetFunction.CountA([a:a])
                    sr = sr & rw & ":" & rw & ","
                Next rw
                Range(Left(sr, Len(sr) - 1)).Insert
                End Sub



        2-2、单元格的基础操作2（移动CUT）

            Sub 宏1()'
            ' 宏1 宏'
              [e3:g3].Cut Range("A2")
            End Sub

            Sub test()
            Dim rng As Range
            For Each rng In Range("a2", [a1].End(xlDown))
            rng.Resize(1, 3).Cut Cells(Rows.Count, (rng.Value - 2011) * 4 + 1).End(xlUp)(2, 1)
            Next
            End Sub


            Sub 归类()
            Dim rng As Range
            For Each rng In Range("a2", [a1].End(xlDown))
            rng.Resize(1, 3).Cut Cells(Rows.Count, (rng.Value - 2011) * 4 + 1).End(xlUp)(2, 1)
            Next
            End Sub




        2-3、单元格的基础操作3（复制COPY）

            Sub test()
            Dim rngs1 As Range, rngs2 As Range
            Set rngs1 = Range("a4", Cells(Rows.Count, 4).End(xlUp))
            Set rngs2 = Worksheets("流水账").Cells(Rows.Count, 1).End(xlUp)(2, 1)
            rngs1.Copy rngs2
            rngs2(1, 6).Resize(rngs1.Rows.Count, 1) = [e2]
            rngs2(1, 7).Resize(rngs1.Rows.Count, 1) = Now
            End Sub

            Sub 宏1()
            Range("a7:e7").Copy Range("a13")
            End Sub

            Sub 宏2()
                Selection.ClearContents
            End Sub

            Sub 保存()
            Dim rngs1 As Range, rngs2 As Range
            Set rngs1 = Range("a4", [d4].End(xlDown))
            Set rngs2 = Worksheets("流水账").[a1].End(xlDown)(2, 1)
            rngs1.Copy rngs2
            rngs2(1, 6).Resize(rngs1.Rows.Count, 1) = [e2]
            rngs2(1, 7).Resize(rngs1.Rows.Count, 1) = Now
            [a4:d11].ClearContents
            End Sub


        2-4、单元格的基础操作4（查找FIND）

            Sub test()
            Dim rng
            Set rng = Range("d:d").Find("7")
            End Sub

            Sub test()
            Dim rngs1 As Range, rngs2 As Range
            Set rngs1 = Range("a4", Cells(Rows.Count, 4).End(xlUp))
            Set rngs2 = Worksheets("流水账").Cells(Rows.Count, 1).End(xlUp)(2, 1)
            rngs1.Copy rngs2
            rngs2(1, 6).Resize(rngs1.Rows.Count, 1) = [e2]
            rngs2(1, 7).Resize(rngs1.Rows.Count, 1) = Now
            End Sub

            Sub 宏1()
            Range("a7:e7").Copy Range("a13")
            End Sub
            Sub 宏2()
                Selection.ClearContents
            End Sub

            Sub 保存()
            Dim rngs1 As Range, rngs2 As Range
            Set rngs1 = Range("a4", [d4].End(xlDown))
            Set rngs2 = Worksheets("流水账").[a65536].End(xlUp)(2, 1)
            If rngs2(1, 8).EntireColumn.Find([b2]) Is Nothing Then
                rngs1.Copy rngs2
                rngs2(1, 6).Resize(rngs1.Rows.Count, 1) = [e2]
                rngs2(1, 7).Resize(rngs1.Rows.Count, 1) = Now
                rngs2(1, 8).Resize(rngs1.Rows.Count, 1) = [b2].Value
            Else
            MsgBox "已经保存过了"
            End If
            End Sub

            Sub 开单()
            [a4:d11].ClearContents
            [b2] = Format(Now, "yyyymmdd-hhmmss")
            End Sub


        2-5、单元格的基础操作5（续说单号添加问题）

            Sub 保存()
            Dim rngs1 As Range, rngs2 As Range
            Set rngs1 = Range("a4", [d3].End(xlDown))
            Set rngs2 = Worksheets("流水账").[a65536].End(xlUp)(2, 1)
            If rngs2(1, 8).EntireColumn.Find([b2]) Is Nothing Then
                rngs1.Copy rngs2
                rngs2(1, 6).Resize(rngs1.Rows.Count, 1) = [e2]
                rngs2(1, 7).Resize(rngs1.Rows.Count, 1) = Now
                rngs2(1, 8).Resize(rngs1.Rows.Count, 1) = [b2].Value
            Else
            MsgBox "已经保存过了"
            End If
            End Sub

            Sub 开单()
            Dim rng As Range
            [a4:d11].ClearContents
            Set rng = Worksheets("流水账").[h65536].End(xlUp)
            If Left(rng.Value, 8) = Format(Now, "yyyymmdd") Then
                [b2] = Left(rng.Value, 8) & Format(Right(rng.Value, 3) + 1, "-000")
            Else
                [b2] = Format(Now, "yyyymmdd-001")
            End If
            End Sub


            Sub 开单2()
            Dim rng As Range
            Range("a4:d11").ClearContents
            Set rng = Worksheets("流水账").Cells(Rows.Count, "h").End(xlUp)
            If Left(rng.Value, 8) = Format(Now, "yyyymmdd") Then
            [b2] = Left(rng.Value, 8) & Format(Right(rng.Value, 3) + 1, "-000")
            Else
            [b2] = Format(Now, "yyyymmdd-001")
            End If
            End Sub



        2-6、单元格基础操作6（查找下一个FINDNEXT）

            Sub test()
            Dim rng As Range, rngadd$, rngs1 As Range, rngs2 As Range
            Set rng = Range("b:b").Find([g1].Value)
            rngadd = rng.Address
            Do
                Set rng = Range("b:b").FindNext(rng)
                Set rngs1 = Cells(Rows.Count, "f").End(xlUp)(2, 1).Resize(1, 3)
                Set rngs2 = rng.EntireRow.Range("a1:c1")
                rngs1 = rngs2.Value
            Loop Until rng.Address = rngadd
            End Sub


            Sub 筛选()
            Dim rng As Range, addres$, rngs1 As Range, rngs2 As Range
            Set rng = Range("b:b").Find([g1].Value)
            addres = rng.Address
            Range("f3:h10000").Clear
            Do
            Set rng = Range("b:b").FindNext(rng)
            Set rngs1 = Cells(Rows.Count, "f").End(xlUp)(2, 1)
            Set rngs2 = rng.EntireRow.Range("a1:c1")
            rngs2.Copy rngs1
            Loop Until addres = rng.Address
            End Sub




        2-7、单元格格式设置（实例--按条件标记单元格）

            'Font.Color         字体颜色
            'Font.Size          字体大小
            'Font.Bold          粗体
            'Interior.Color     底纹颜色
            'border.linestyle   边框线型
            'Border.Color       边框颜色
            'Border.Weight      边框粗细




            Sub 条件标记()
            Dim rng As Range
            For Each rng In Range("b2", Cells(Rows.Count, 2).End(xlUp))
                If rng.Value >= 100000 Then
                    rng.EntireRow.Range("a1:c1").Interior.Color = RGB(255, 0, 0)
                    rng.EntireRow.Range("a1:c1").Font.Bold = True
                    rng.EntireRow.Range("a1:c1").Font.Color = RGB(255, 255, 255)
                End If
            Next
            End Sub

            Sub 宏1()
                With Selection.Interior
                    .Pattern = xlSolid
                    .PatternColorIndex = xlAutomatic
                    .Color = 65535
                    .TintAndShade = 0
                    .PatternTintAndShade = 0
                End With
                With Selection.Font
                    .Color = -16776961
                    .TintAndShade = 0
                End With
                With Selection.Font
                    .Name = "微软雅黑"
                    .Size = 14
                    .Strikethrough = False
                    .Superscript = False
                    .Subscript = False
                    .OutlineFont = False
                    .Shadow = False
                    .Underline = xlUnderlineStyleNone
                    .Color = -16776961
                    .TintAndShade = 0
                    .ThemeFont = xlThemeFontNone
                End With
                Selection.Font.Bold = True
            End Sub



        2-8、简化代码的利器with

            Sub test()
            Dim rng As Range
            For Each rng In Range("b2", Cells(Rows.Count, 2).End(xlUp))
                If rng.Value >= 100000 Then
                    With rng.EntireRow.Range("a1:c1")
                        .Interior.Color = RGB(160, 16, 16)
                        With .Font
                            .Color = RGB(255, 255, 255)
                            .Bold = True
                            .Name = "宋体"
                            .Size = 12
                        End With
                    End With
                End If
            Next
            End Sub



        2-9、单元格的数字格式设置与清除

            Sub 宏2()
                Selection.Clear
                Selection.ClearFormats
                Selection.ClearContents
                Selection.ClearComments
                Selection.ClearHyperlinks
            End Sub

            Sub testend()
            Dim rng As Range
            Range("a1").CurrentRegion.ClearFormats
            Range("c:c").NumberFormatLocal = "0%"
            For Each rng In Range("b2", Cells(Rows.Count, 2).End(xlUp))
                If rng.Value >= 100000 Then
                    With rng.EntireRow.Range("a1:c1")
                        .Interior.Color = RGB(160, 16, 16)
                        With .Font
                            .Color = RGB(255, 255, 255)
                            .Bold = True
                            .Name = "宋体"
                            .Size = 12
                        End With
                    End With
                End If
            Next
            End Sub



        2-10、单元格合并应用（自动合并部门相同的单元格）

            Sub 合并单元格()
            Dim r%
            Application.DisplayAlerts = False
            For r = Cells(Rows.Count, 1).End(xlUp).Row To 2 Step -1
                If Cells(r, 1).Value = Cells(r, 1)(0, 1).Value Then Cells(r, 1)(0, 1).Resize(2, 1).Merge
            Next
            Application.DisplayAlerts = True
            End Sub

            Sub 宏1()
            Dim r%
            Application.DisplayAlerts = False
            For r = Cells(Rows.Count, 1).End(xlUp).Row To 2 Step -1
            If Cells(r, 1).Value = Cells(r, 1)(0, 1).Value Then
                Cells(r, 1)(0, 1).Resize(2, 1).Merge
            End If
            Next
             Application.DisplayAlerts = True
            End Sub




        2-11、批量创建超链接

            Sub 批量超链接()
            Dim rng As Range
            For Each rng In Range("a1", Cells(Rows.Count, 1).End(xlUp))
                Sheet1.Hyperlinks.Add rng(1, 2), rng.Value, , rng.Value, "open_it"
            Next
            End Sub

            Sub 宏1()
                ActiveSheet.Hyperlinks.Add Anchor:=Selection, Address:= _
                    "2.1%20单元格的基础操作1（选择、插入、删除）.xlsm", TextToDisplay:="打开"
            End Sub

            Sub 创建超链接()
            Dim rng As Range
            For Each rng In Range("a1", Cells(1, 1).End(xlDown))
                Sheet1.Hyperlinks.Add rng(1, 2), rng.Value, , rng.Value, "打开"
            Next
            End Sub



        2-12、超链接应用（提取地址）

            Sub test()
            Dim hl As Hyperlink
            For Each hl In Sheet1.Hyperlinks
                hl.Parent(1, 2) = hl.Address
            Next
            End Sub

            Sub 提取地址()
            Dim hl As Hyperlink
            For Each hl In Sheet1.Hyperlinks
                hl.Parent(1, 2) = hl.Address
            Next
            End Sub



        2-13、会说话的excel（朗读功能应用1）

            Sub ti()
            Range("a12:b13").Speak
            End Sub

            Sub test()
            Dim rng As Range
            For Each rng In [b3:b11]
                If rng.Value >= 90 Then
                    rng(1, 0).Resize(1, 2).Speak
                End If
            Next
            End Sub



        2-14、会说话的excel（朗读功能应用2）

            Sub 朗读()
            Dim rng As Range, sr As String, s
             For Each rng In Range("b3:b11")
                Select Case rng.Value
                    Case 0 To 59
                    sr = "不及格"
                    Case 60 To 79
                    sr = "合格"
                    Case 80 To 89
                    sr = "良好"
                    Case 90 To 100
                    sr = "优秀"
                End Select
                   Application.Speech.Speak rng(1, 0).Value & "的分数是：" & rng.Value & ",等级是：" & sr
            Next
            End Sub




        2-15、会说话的excel（朗读功能应用3） 

            Sub test()
            Dim rng As Range, sr$, srs$
            For Each rng In Range("b3", Cells(3, 2).End(xlDown))
                Select Case rng.Value
                    Case 0 To 59
                    sr = "不及格"
                    Case 60 To 79
                    sr = "及格"
                    Case 80 To 89
                    sr = "良好"
                    Case 90 To 100
                    sr = "优秀"
                End Select
            srs = rng(1, 0).Value & "的分数是：" & rng.Value & "分，成绩等级是：" & sr
            rng(1, 0).Resize(1, 2).Interior.Color = RGB(255, 255, 0)
            Application.Speech.Speak srs
            rng(1, 0).Resize(1, 2).Interior.Color = xlNone
            Next
            End Sub

            Sub 朗读()
            Dim rng As Range, sr As String, s
             For Each rng In Range("b3:b11")
                Select Case rng.Value
                    Case 0 To 59
                    sr = "不及格"
                    Case 60 To 79
                    sr = "合格"
                    Case 80 To 89
                    sr = "良好"
                    Case 90 To 100
                    sr = "优秀"
                End Select
                        rng(1, 0).Resize(1, 2).Interior.Color = RGB(255, 255, 0)
                   Application.Speech.Speak rng(1, 0).Value & "的分数是：" & rng.Value & ",等级是：" & sr
                    rng(1, 0).Resize(1, 2).Interior.Color = xlNone
            Next
            End Sub

            Sub 宏1()
                Range("A4").Activate
                Range("A4").Speak
            End Sub

    2013_第三章：工作簿与工作表应用

        3-1、工作簿的日常操作（1）

            '--------------工作簿------------
            '以序号来表示：Workbooks (序号)
            '以文件名来表示：Workbooks ("工作簿名")
            '工作簿集合：Workbooks
            '当前工作簿：ThisWorkbook
            '活动工作簿：ActiveWorkbook

            Sub test()
            Workbooks.Add
            ActiveWorkbook.SaveAs ThisWorkbook.Path & "\123.xlsx"
            End Sub


        3-2、工作簿的日常操作（2） 

            Sub test()
            Workbooks.Open ThisWorkbook.Path & "\123.xlsx"
            [a1:c1] = "tianyunchuan"
            ActiveWorkbook.Close 1
            End Sub



        3-3、拆分记录到工作簿

            Sub test()
            Dim wb As Workbook, d As Date, rng As Range, wcount%, rngs As Range, tit As Range
            For d = #1/1/2015# To #1/5/2015#
                Set rng = Range("a:a").Find(d)
                wcount = WorksheetFunction.CountIf([a:a], d)
                Set rngs = rng.Resize(wcount, 3)
                Set tit = [a1:c1]
                Workbooks.Add
                tit.Copy [a1]
                rngs.Copy [a2]
                ActiveWorkbook.SaveAs ThisWorkbook.Path & "\" & Format(d, "yyyy年M月d日") & ".xlsx"
                ActiveWorkbook.Close
            Next
            End Sub

            Sub 拆分记录到工作簿()
            Dim d As Date, rng As Range, rct%, rngs As Range, titrng As Range
            For d = #1/1/2015# To #1/5/2015#
                Set rng = Range("a:a").Find(d)
                rct = WorksheetFunction.CountIf([a:a], d)
                Set rngs = rng.Resize(rct, 3)
                Set titrng = [a1:c1]
                Workbooks.Add
                titrng.Copy [a1]
                rngs.Copy [a2]
                ActiveWorkbook.SaveAs ThisWorkbook.Path & "\" & Format(d, "yyyy年M月d日")
                ActiveWorkbook.Close
            Next
            End Sub


        3-4、工作表的日常操作（1）

            '--------------工作表------------
            '用序号表示：WORKSHEETS(3)
            '用工作表名称表示：WORKSHEETS("工资表")
            '用工作表代码名称表示：Sheet1、Sheet2....
            '活动工作表：ActiveWorkbook

            Sub test()
            Dim ws As Worksheet
            Worksheets.Add Sheet1
            End Sub

            Sub ti()
            Dim ws As Worksheet
            For Each ws In Worksheets
            MsgBox ws.Name
            Next
            End Sub




        3-5、工作表的日常操作（2）

            Sub test()
            'Worksheets.Add.Name = "abc" 'ÐÂ½¨²¢ÃüÃû
            'Application.DisplayAlerts = False
            'Sheet4.Delete
            'Application.DisplayAlerts = True
            'Sheet1.Move , Worksheets("产品表")
            Sheet1.Copy , Worksheets("²产品表")
            End Sub



        3-6、工作表与工作簿的结合应用

            Sub 拆分工作表到工作簿()
            Dim ws As Worksheet, wb As Workbook
            Application.DisplayAlerts = False
            For Each ws In ThisWorkbook.Sheets
                Workbooks.Add
                ws.Copy Worksheets(1)
                Worksheets(2).Delete
                ActiveWorkbook.SaveAs ThisWorkbook.Path & "\" & ws.Name
                ActiveWorkbook.Close
            Next
            Application.DisplayAlerts = True
            End Sub

            Sub 拆分工作表()
            Dim ws As Worksheet
            For Each ws In ThisWorkbook.Worksheets
            Workbooks.Add
            ws.Copy , Worksheets(1)
            Application.DisplayAlerts = False
            Worksheets(1).Delete
            Application.DisplayAlerts = True
            ActiveWorkbook.SaveAs ThisWorkbook.Path & "\" & ws.Name
            ActiveWorkbook.Close
            Next
            End Sub


        3-7、遍历文本名函数（DIR函数）

        Sub ti()
        Dim sr$
        'sr = VBA.Dir("C:\0.Tianyc_Proc\0.Proc_tian_20190809\")
        sr = VBA.Dir("C:\0.Tianyc_Proc\0.Proc_tian_20190809\*.pptx")
        Do
        sr = Dir
        Loop Until sr = ""
        End Sub

        Sub test()
        Dim pah$, sr$, n%
        pah = "C:\0.Tianyc_Proc\0.Proc_tian_20190809\*.*"
        sr = Dir(pah)
        Do
            n = n + 1
            Cells(n, 1) = sr
            sr = Dir
        Loop Until sr = ""
        End Sub


        3-8、DIR函数与超链接应用（1）

            Sub test()
            Dim pah$, sr$, n%
            On Error GoTo 100
            [a3:b100].ClearContents
            pah = ThisWorkbook.Path & "\" & [b1] & "\" & [d1]
            sr = Dir(pah)
            Do
                n = n + 1
                Cells(n + 2, 1) = n
                Cells(n + 2, 2) = sr
                Sheet1.Hyperlinks.Add Cells(n + 2, 2), ThisWorkbook.Path & "\" & [b1] & "\" & sr
                sr = Dir
            Loop Until sr = ""
            100:
            End Sub



        3-9、DIR函数与超链接应用（2）

            Sub 筛选ÎÄ¼þ()
            Dim sr$, n%
            On Error Resume Next
            sr = Dir(ThisWorkbook.Path & "\" & [b1] & "\" & [d1])
            Range("a3:b999").ClearContents
            Do
                n = n + 1
                Cells(n + 2, 1) = n
                Cells(n + 2, 2) = sr
                Sheet2.Hyperlinks.Add Cells(n + 2, 2), ThisWorkbook.Path & "\" & [b1] & "\" & sr
                sr = Dir
            Loop Until sr = ""
            End Sub



        3-10、合并工作表（1）

            Sub 合并()
            Dim ws As Worksheet, rngs As Range
            [a1] = "员工ID": [b1] = "姓名": [c1] = "部门"
            For Each ws In Worksheets
                If ws.Name <> "合并" Then
                    Set rngs = ws.Range("a2", [b1].End(xlDown))
                End If
            Next
            End Sub



        3-11、合并工作表（2）

            Sub ºÏ²¢()
            Dim ws As Worksheet, rngs As Range, cell As Range
            Columns("a:c").ClearContents
            [a1] = "Ô±¹¤ID": [b1] = "姓名": [c1] = "部门"
            For Each ws In Worksheets
                If ws.Name <> Sheet1.Name Then
                    Set rngs = ws.Range("a2", ws.[b1].End(xlDown))
                    Set cell = Cells(Rows.Count, 1).End(xlUp)(2, 1)
                    rngs.Copy cell
                    cell(1, 3).Resize(rngs.Rows.Count, 1) = ws.Name
                End If
            Next
            End Sub


        3-12、合并工作簿（1）

            Sub test()
            Dim sr$, wb As Workbook, ws As Worksheet, rngs As Range
            sr = Dir(ThisWorkbook.Path & "\*分公司.xlsm")
            Do
            Set wb = Workbooks.Open(ThisWorkbook.Path & "\" & sr)
            For Each ws In wb.Worksheets
                Set rngs = ws.Range("a2", ws.[b1].End(xlDown))
            Next
            sr = Dir
            Loop Until sr = ""
            End Sub

            Sub test()
            Dim sr$, wb As Workbook, ws As Worksheet, rngs As Range, rng As Range
            sr = Dir(ThisWorkbook.Path & "\*.xlsm")
            Columns("a:d").ClearContents
            [a1] = "序号": [b1] = "姓名": [c1] = "部门": [d1] = "分公司"
            Do
                If sr <> "数据.xlsm" Then
                    Set wb = Workbooks.Open(ThisWorkbook.Path & "\" & sr)
                    For Each ws In wb.Worksheets
                        Set rngs = ws.Range("a2", ws.[b1].End(xlDown))
                        Set rng = ThisWorkbook.Worksheets(1).Cells(Rows.Count, 1).End(xlUp)(2, 1)
                        rngs.Copy rng
                        rng(1, 3).Resize(rngs.Rows.Count, 1) = ws.Name
                        rng(1, 4).Resize(rngs.Rows.Count, 1) = Left(sr, 5)
                    Next
                    wb.Close
                End If
               sr = Dir
            Loop Until sr = ""
            End Sub



        3-13、合并工作簿（2）

            Sub test()
            Dim sr$, wb As Workbook, ws As Worksheet, rngs As Range, rng As Range
            sr = Dir(ThisWorkbook.Path & "\*.xlsm")
            Columns("a:d").ClearContents
            [a1] = "序号": [b1] = "姓名": [c1] = "部门": [d1] = "分公司"
            Do
                If sr <> "数据.xlsm" Then
                    Set wb = Workbooks.Open(ThisWorkbook.Path & "\" & sr)
                    For Each ws In wb.Worksheets
                        Set rngs = ws.Range("a2", ws.[b1].End(xlDown))
                        Set rng = ThisWorkbook.Worksheets(1).Cells(Rows.Count, 1).End(xlUp)(2, 1)
                        rngs.Copy rng
                        rng(1, 3).Resize(rngs.Rows.Count, 1) = ws.Name
                        rng(1, 4).Resize(rngs.Rows.Count, 1) = Left(sr, 5)
                    Next
                    wb.Close
                End If
               sr = Dir
            Loop Until sr = ""
            End Sub



        3-14、退出语句

            'End
            'stop               > 和断点差不多
            'Exit Sub
            'exit do            > do loop
            'exit for
            'application.Quit   > 关闭excel程序


            Sub test()
            Dim i
            Do
            i = i + 1
            If i = 4 Then Application.Quit
            Loop
            End Sub


    	3-15、错误值处理

    		'   出现错误的可能
    		'   1.语法错误
    		'   2.书写错误
    		'   3.使用错误

    		'   规避错误的几种方法
    		'   1.on error goto line 如果发生错误，跳转到指定位置继续执行代码
    		'   2.on error resume next 如果有错误，忽略，继续执行

    		Sub test()
    		On Error GoTo 100
    		Worksheets.Add.Name = "工资表"
    		Exit Sub
    		100:
    		Application.DisplayAlerts = False
    		ActiveSheet.Delete
    		MsgBox "已有相同的月份"
    		Application.DisplayAlerts = True
    		End Sub

    2013_第四章：数组

        4-1、什么是数组？

            # excel操作： "=" 选中区域 >  ctr+shift+enter > 点击(F9) 查看
            # 数组不是对象！！！
            Sub test()
            '[a2:f2] = Array(1, 2, 3, 4, 5, 100)
            '[a4:a9] = WorksheetFunction.Transpose(Array(1, 2, 3, 4, 5, 100))
            '[a2:f2] = [{"A","B","C","D","E","Z"}]
            '[A4:A9] = [{"A";"B";"C";"D";"E";"Z"}]
            [A1:D5] = [{1,1,1,1;2,2,2,2;3,3,3,3;4,4,4,4;5,5,5,5}]
            End Sub



        4-2、数组的排列及申明

            '1.将excel中的数据写入到数组（内存）
            '2.VBA中数组与单元格的行列的对应关系
            '3.数据声明
            '
            '
            Sub TEST()
            Dim arr(1 To 3, 4 To 8, 1 To 5, 5 To 9)， arr1（1 To 10)
            'arr = [a1:c2]
            'arr = Array(1, 2, 3)
            End Sub



        4-3、数组的读取（条件计数）

            Sub test()
            Dim arr, ar, n%
            arr = Range("b2", [b2].End(xlDown))
            For Each ar In arr
                If ar >= 60 Then n = n + 1
            Next
                MsgBox "共有" & n & "人及格"
            End Sub



        4-4、数组的读取（条件求和）

            Sub条件求和()
            Dim arr, i%, n%
            arr = Range("b2", [c2].End(xlDown))
            For i = 1 To Range("b2", [c2].End(xlDown)).Rows.Count
                If arr(i, 1) = "人事部" Then n = arr(i, 2) + n
            Next
             MsgBox "总分为" & n
            End Sub





        4-5、数组的写入

            Sub test()
            Dim arr, i%, arr1(1 To 15), n%
            arr = [b2:c16]
            For i = 1 To 15
                If arr(i, 1) = "人事部" Then n = n + 1: arr1(n) = arr(i, 2)
            Next
            MsgBox "总分为" & WorksheetFunction.Sum(arr1) _
                            & Chr(13) & "平均分为" & WorksheetFunction.Average(arr1)
            End Sub



        4-6、动态数组1

            Sub test()
            Dim arr, arr1, n%
            num = WorksheetFunction.CountIf([b:b], "人事部")
            ReDim arr1(1 To num)
            arr = [b2:c16]
            For i = 1 To 15
            If arr(i, 1) = "人事部" Then n = n + 1: arr1(n) = arr(i, 2)
            Next
            MsgBox Application.Sum(arr1)
            End Sub



        4-7、动态数组2
            # ReDim Preserve arr1 > 定义时 > arr1() Preserve(保留数据)
            Sub test()
            Dim arr, arr1(), n%
            'ReDim arr1(1 To num)
            arr = [b2:c16]
            For i = 1 To 15
            If arr(i, 1) = "人事部" Then
            n = n + 1
            ReDim Preserve arr1(1 To n)
            arr1(n) = arr(i, 2)
            End If
            Next
            MsgBox Application.Sum(arr1)
            End Sub


        4-8、与数组有关的函数(UBOUND和LBOUND)

            Sub test()
            Dim arr(1 To 5, 4 To 12)
            MsgBox LBound(arr)
            End Sub




            Sub 筛选()
            Dim arr, i%, n%, arr1, icount
            icount = Application.CountIf([b:b], "人事部")
            ReDim arr1(1 To icount, 1 To 2)
            arr = Range("a2", [c1].End(xlDown))
            For i = 1 To UBound(arr)
                If arr(i, 2) = "人事部" Then
                    n = n + 1
                    arr1(n, 1) = arr(i, 1)
                    arr1(n, 2) = arr(i, 3)
                End If
            Next
            [e1].Resize(UBound(arr1), 2) = arr1
            End Sub



        4-9、数组一维变二维

            Sub test()
            Dim arr, arr1
            arr = Array([A1:E1], [A2:E2])
            arr1 = [A1:E2]
            End Sub



        4-10、合并多工作表1

            Sub 合并数据()
            Dim ws As Worksheet, arr(), rngs As Range, icount, rng As Range, n%, arr1
            For Each ws In Worksheets
                If ws.Name <> ActiveSheet.Name Then
                    Set rngs = ws.Range("a2", ws.[a1].End(xlDown))
                    icount = icount + rngs.Rows.Count
                    ReDim Preserve arr(1 To icount)
                    For Each rng In rngs
                        n = n + 1
                        arr(n) = rng.Resize(1, 3)
                    Next
                End If
            Next
            [a1].Resize(icount, 3) = Application.Transpose(Application.Transpose(arr))
            End Sub




        4-11、合并多工作表2

            Sub demo()
            Dim ws As Worksheet, rngs As Range, arr(), n, rng As Range, icount%, arr1
            Columns("a:c").ClearContents
            For Each ws In Worksheets
                If ws.Name <> ActiveSheet.Name Then
                    Set rngs = ws.Range("a2", ws.[a2].End(xlDown))
                    icount = icount + rngs.Rows.Count
                    ReDim Preserve arr(1 To icount)
                    For Each rng In rngs
                        n = n + 1
                        arr(n) = rng.Resize(1, 3)
                    Next
                End If
            Next
            arr1 = Application.Transpose(Application.Transpose(arr))
            [a2].Resize(icount, 3) = arr1
            [a1:c1] = [{"姓名","部门","分数"}]
            End Sub



        4-12、与数组有关的函数（JOIN函数1）

            Sub ti()
            Dim arr, a
            arr = Array(1, 2, 3)
            a = VBA.Join(arr)
            a = VBA.Join(arr, Chr(13))
            MsgBox (a)
            End Sub

            Sub test()
            Dim i%, ar, arr(), n%, sr$
            sr = InputBox("请输入关键字")
            For i = 1 To [a1].CurrentRegion.Rows.Count
                If Join(Application.Transpose(Application.Transpose(Cells(i, 1).Resize(1, 4)))) Like "*" & sr & "*" Then
                    n = n + 1
                    ReDim Preserve arr(1 To n)
                    arr(n) = Cells(i, 1).Resize(1, 4)
                End If
                Next
            [h1].Resize(n, 4) = Application.Transpose(Application.Transpose(arr))
            End Sub


        4-13、与数组有关的函数（JOIN函数2）

            Sub test()
            Dim i%, ar, arr(), n%, sr$
            sr = InputBox("请输入查找关键字")
            For i = 1 To [a1].CurrentRegion.Rows.Count
                If Join(Application.Transpose(Application.Transpose(Cells(i, 1).Resize(1, 4)))) Like "*" & sr & "*" Then
                    n = n + 1
                    ReDim Preserve arr(1 To n)
                    arr(n) = Cells(i, 1).Resize(1, 4)
                End If
                Next
            [h1].Resize(n, 4) = Application.Transpose(Application.Transpose(arr))
            End Sub

            Sub 筛选()
            Dim icount%, arr, i%, sr, arr1(), n%, s$
            Columns("h:k").ClearContents
            icount = Application.CountA([a:a])
            s = InputBox("请输入筛选的关键字")
            For i = 1 To icount
                arr = Application.Transpose(Application.Transpose(Cells(i, 1).Resize(1, 4)))
                sr = Join(arr)
                If sr Like "*" & s & "*" Then
                n = n + 1
                ReDim Preserve arr1(1 To n)
                arr1(n) = arr
                End If
            Next
            [h1].Resize(n, 4) = Application.Transpose(Application.Transpose(arr1))
            End Sub





        4-14、与数组有关的函数（SPLIT函数）

            Sub ti()
            Dim arr
            arr = Split(",1,2,3,13,19,", ",")
            End Sub

            Sub test()
            Dim arr, rng As Range, n%
            ReDim arr(1 To Application.CountA([a:a]) - 1)
            For Each rng In Range("a2", [a2].End(xlDown))
                n = n + 1
                arr(n) = Split(rng.Value, " ")
            Next
                [b2].Resize(n, 2) = Application.Transpose(Application.Transpose(arr))
            End Sub


        4-15、与数组有关的函数（FILTER函数1）

            # 包含
            Sub ti()
            Dim arr, ar
            arr = Array(34, 3455, 23, 56, 4, 234, 554, 35, 76, 566)
            ar = Filter(arr, "3")
            ar = Filter(arr, "3", False)      # 不包含
            End Sub

            Sub test1()
            Dim rng As Range, arr(), n
            For Each rng In Range("a2", [a2].End(xlDown))
            n = n + 1
            ReDim Preserve arr(1 To n)
            arr(n) = Join(Application.Transpose(Application.Transpose(rng.Resize(1, 4))))
            Next
            End Sub

            Sub test()
            Dim arr(1 To 7), rng As Range, n, arr1, ar, k, arr2
            For Each rng In Range("a2", [a2].End(xlDown))
                n = n + 1
                arr(n) = Join(Application.Transpose(Application.Transpose(rng.Resize(1, 4))))
            Next
            arr1 = Filter(arr, InputBox("请输入搜索关键字"))
            ReDim arr2(1 To UBound(arr1) + 1)
            For Each ar In arr1
                k = k + 1
                arr2(k) = Split(ar)
            Next
            [h2].Resize(k, 4) = Application.Transpose(Application.Transpose(arr2))
            End Sub




        4-16、与数组有关的函数（FILTER函数2） 

            Sub test()
            Dim arr(1 To 7), rng As Range, n, arr1, ar, k, arr2
            For Each rng In Range("a2", [a2].End(xlDown))
                n = n + 1
                arr(n) = Join(Application.Transpose(Application.Transpose(rng.Resize(1, 4))))
            Next
            arr1 = Filter(arr, InputBox("请输入搜索关键字"))
            ReDim arr2(1 To UBound(arr1) + 1)
            For Each ar In arr1
                k = k + 1
                arr2(k) = Split(ar)
            Next
            [h2].Resize(k, 4) = Application.Transpose(Application.Transpose(arr2))
            End Sub

            Sub test1()
            Dim rng As Range, arr(), n, arr1, ar, arr2, k%
            [h2:k8].ClearContents
            For Each rng In Range("a2", [a2].End(xlDown))
            n = n + 1
            ReDim Preserve arr(1 To n)
            arr(n) = Join(Application.Transpose(Application.Transpose(rng.Resize(1, 4))))
            Next
            arr1 = Filter(arr, InputBox("请输入搜索的关键字"))
            ReDim arr2(1 To UBound(arr1) + 1)
            For Each ar In arr1
                k = k + 1
                arr2(k) = Split(ar)
            Next
            [h2].Resize(k, 4) = Application.Transpose(Application.Transpose(arr2))
            End Sub




        查找
            Set rng = Range("a:a").Find("项目")
            num = WorksheetFunction.CountIf([b:b], "人事部")  #查找个数

    2013_第七章：VBA与图表

        7-1、一句代码创建图表
            '录制图表建立
            '查找修改代码
            '关于图表的类型和建立图表的单元格区域设置

            Sub test()
            Dim chat As Shape
            Set chat = Sheet1.Shapes.AddChart(-4100, 0, 0, 500, 300)
            chat.Chart.SetSourceData Range("A1:D7")
            End Sub


            Sub 宏1()
                ActiveSheet.Shapes.AddChart2(201, xlColumnClustered).Select
                ActiveChart.SetSourceData Source:=Range("Sheet1!$A$1:$D$7")
            End Sub

            Sub ti()
                ActiveSheet.Shapes.AddChart2(332, xlLineMarkers).Select
                ActiveChart.SetSourceData Source:=Range("Sheet3!$A$1:$D$7")
            End Sub

            Sub tia()
            Dim cht As Shape
            Set cht = Sheet3.Shapes.AddChart(xlLineMarkers, 200, 200, 500, 200)
            'ActiveChart.SetSourceData Source:=Range("Sheet1!$A$1:$D$7")
            cht.Chart.SetSourceData Range("A1:D7")
            End Sub


        7-2、创建动态图表
            '遍历工作表中的图表
            '根据数据源创建动态图表

            Sub 遍历工作表中的图表()
            Dim cht As ChartObject
            For Each cht In Sheet1.ChartObjects
                MsgBox cht.Name
            Next
            End Sub


            Sub test()
            Dim ct As ChartObject
            For Each ct In Sheet1.ChartObjects
                ct.Select
            Next
            End Sub




        7-3、图表的外壳
            Sub 遍历工作表中的图表()
            Dim cht As ChartObject, n%
            For Each cht In Sheet3.ChartObjects
                n = n + 1
                cht.Height = 150
                cht.Width = 300
                x = ((n + 1) \ 2) * 160 - 160
                cht.Top = x
                y = ((n + 1) Mod 2) * 310
                cht.Left = y
            Next
            End Sub


            Sub test()
            Dim cht
            Set cht = Sheets("Chart1")
            End Sub



        7-4、创建动态图表(动态图表类型)
            Private Sub Worksheet_SelectionChange(ByVal Target As Range)
            Dim ar, cht As Chart, va%
            If Not Intersect(Range("a1", [a1].End(xlToRight).End(xlDown)), Target) Is Nothing Then
                    Set cht = Sheet1.ChartObjects("图表 5").Chart
                    cht.SetSourceData Target
            End If
            End Sub

            Private Sub 环形图_Click()
            Set cht = Sheet1.ChartObjects("图表 5").Chart
            cht.ChartType = -4120
            End Sub

            Private Sub 柱形图_Click()
            Set cht = Sheet1.ChartObjects("图表 5").Chart
            cht.ChartType = 51
            End Sub

            Private Sub OptionButton21_Click()
            Sheet3.ChartObjects("图表 1").Chart.ChartType = xlColumnClustered '柱形图
            End Sub

            Private Sub OptionButton22_Click()
            Sheet3.ChartObjects("图表 1").Chart.ChartType = xlDoughnut '环形图
            End Sub

            Private Sub OptionButton23_Click()
            Sheet3.ChartObjects("图表 1").Chart.ChartType = xlLine '折线图
            End Sub

            Private Sub Worksheet_SelectionChange(ByVal Target As Range)
            Dim cht As Chart
            If Not Intersect(Range("a1").CurrentRegion, Target) Is Nothing Then
                Set cht = Sheet3.ChartObjects("图表 1").Chart
                cht.SetSourceData Target
            End If
            End Sub


            Sub ti()
            Dim cht As Chart
            Set cht = Sheet3.ChartObjects("Chart 5").Chart
            cht.SetSourceData Range("a1:d7")

            End Sub


            Sub tia()
            Dim cht As Chart
            Set cht = Sheet3.ChartObjects("Chart 5").Chart
            cht.SetSourceData Selection

            End Sub



        7-5、仿迷你图批量创建图表
            Sub 批量创建图表()
            Dim rng As Range
            For Each rng In Range("a2:a7")
                Sheet1.Shapes.AddChart(, rng(1, 8).Left, rng(1, 8).Top, rng(1, 8).Width, rng(1, 8).Height).Chart.SetSourceData rng(1, 2).Resize(1, 6)
            Next
            End Sub

            Sub 创建图表()
            Dim rng As Range, sp As Chart
            For Each rng In Range("a2:a7")
            Set sp = Sheet2.Shapes.AddChart(, rng(1, 8).Left, rng(1, 8).Top, rng(1, 8).Width, rng(1, 8).Height).Chart
            sp.SetSourceData rng.Resize(1, 7)
            Next
            End Sub

            Sub test()
            For Each s In Sheet2.ChartObjects

            Next
            End Sub




        7-6、智能创建图表
            Sub 批量创建图表()
            Dim rng As Range
            For Each rng In Range("a2:a7")
                Sheet1.Shapes.AddChart(, rng(1, 8).Left, rng(1, 8).Top, rng(1, 8).Width, rng(1, 8).Height).Chart.SetSourceData rng(1, 2).Resize(1, 6)
            Next
            End Sub

            Sub 创建图表()
            Dim rng As Range, sp As Chart
            For Each rng In Range("a2:a7")
            Set sp = Sheet2.Shapes.AddChart(, rng(1, 8).Left, rng(1, 8).Top, rng(1, 8).Width, rng(1, 8).Height).Chart
            sp.SetSourceData rng.Resize(1, 7)
            Next
            End Sub

            Sub test()
            For Each s In Sheet2.ChartObjects

            Next
            End Sub


            Sub 宏1()
                ActiveSheet.ChartObjects("图表 2").Activate
                ActiveSheet.ChartObjects("图表 2").Activate
                ActiveChart.Parent.Delete
            End Sub




        7-7、图表系列元素实例
            Sub 宏1()
                ActiveSheet.ChartObjects("图表 2").Activate
                ActiveChart.FullSeriesCollection(2).Select
                ActiveChart.FullSeriesCollection(2).Points(1).Select
                With Selection.Format.Fill
                    .Visible = msoTrue
                    .ForeColor.RGB = RGB(192, 0, 0)
                    .Transparency = 0
                    .Solid
                End With
            End Sub

            Sub test()
            Dim cht As Chart, ser As Series, p As Point
            Set cht = Sheet1.ChartObjects("图表 2").Chart
            For Each ser In cht.FullSeriesCollection
                For Each p In ser.Points
                    p.Format.Fill.ForeColor.RGB = RGB(102, 0, 0)
                Next
            Next
            End Sub

            Sub recoder()
                ActiveSheet.ChartObjects("Chart 3").Activate
                ActiveChart.FullSeriesCollection(1).Select
                With Selection.Format.Fill
                    .Visible = msoTrue
                    .ForeColor.RGB = RGB(60, 179, 113)
                    .Transparency = 0
                    .Solid
                End With
                ActiveChart.Legend.Select
                ActiveChart.Legend.Select
                Selection.Position = xlTop
                ActiveChart.ChartTitle.Select
                Selection.Delete
                ActiveSheet.ChartObjects("Chart 3").Activate
                ActiveChart.Axes(xlValue).MajorGridlines.Select
                Selection.Delete
                ActiveSheet.ChartObjects("Chart 3").Activate
                ActiveChart.Axes(xlValue).Select
                ActiveChart.Axes(xlValue).MaximumScale = 100
                ActiveChart.FullSeriesCollection(1).Select
                ActiveChart.FullSeriesCollection(1).ApplyDataLabels
            End Sub




        7-8、图表系列元素实例 （间隔着色）
            Sub 宏1()
            Dim sht As Chart, p As Point, n%
            Set sht = Sheet1.Shapes("图表 2").Chart
            For Each p In sht.FullSeriesCollection(1).Points
                n = n + 1
                If n Mod 2 Then
                    p.Format.Fill.ForeColor.RGB = RGB(192, 0, 0)
                End If
            Next
            End Sub

            Sub 间隔着色()
            Dim cht As Chart, po As Point, n%
            Set cht = Sheet1.Shapes("图表 2").Chart
            For Each po In cht.FullSeriesCollection(1).Points
                n = n + 1
                If n Mod 2 Then
                    po.Format.Fill.ForeColor.RGB = RGB(190, 0, 0)
                End If
            Next
            End Sub

            Sub tt()
                ActiveSheet.ChartObjects("图表 2").Activate
                ActiveChart.PlotArea.Select
                ActiveChart.ChartArea.Select
                ActiveChart.SeriesCollection(1).Select
                ActiveChart.SeriesCollection(1).DataLabels.Select
                ActiveSheet.ChartObjects("图表 2").Activate
                ActiveChart.Axes(xlCategory).Select
                ActiveSheet.ChartObjects("图表 2").Activate
                ActiveChart.PlotArea.Select
                ActiveSheet.ChartObjects("图表 2").Activate
            End Sub



        7-9、图表系列元素实例（有条件的着色图表）
            Sub test()
            Dim cht As Chart, cser As Series, p, n%, tj$
            Set cht = Sheet1.ChartObjects("图表 1").Chart
            tj = InputBox("请输入着色的条件，如"">=100""")
            cht.ClearToMatchColorStyle
            For Each cser In cht.FullSeriesCollection
                arr = cser.Values
                For n = 1 To UBound(arr)
                    If Evaluate(arr(n) & tj) Then cser.Points(n).Format.Fill.ForeColor.RGB = RGB(190, 0, 0)
                Next
            Next
            End Sub

            Sub test1()
            Dim cht As Chart, ser As Series, arr, n%, sr$
            sr = InputBox("请输入条件，如"">=100""")
            Set cht = Sheet1.Shapes("图表 1").Chart
            cht.ClearToMatchColorStyle
            For Each ser In cht.FullSeriesCollection
            arr = ser.Values
            For n = 1 To UBound(arr)
                If Evaluate(arr(n) & sr) Then
                    ser.Points(n).Format.Fill.ForeColor.RGB = RGB(190, 0, 0)
                End If
            Next
            Next
            End Sub




        7-10、图表的数据标签元素
            Sub test()
            Dim cht As Chart, ser As Series, p As Point
            Set cht = Sheet1.Shapes("图表 1").Chart

            '给整个图表添加或删除标签
            cht.ApplyDataLabels , , , , True, True, , , , "|"
            cht.ApplyDataLabels xlDataLabelsShowNone

            '给系列图表添加或删除标签
            For Each ser In cht.SeriesCollection
                ser.ApplyDataLabels
                ser.ApplyDataLabels xlDataLabelsShowNone
            Next

            '给每个点添加或删除标签
            For Each ser In cht.FullSeriesCollection
                For Each p In ser.Points
                    p.ApplyDataLabels
                    p.ApplyDataLabels xlDataLabelsShowNone
                Next
            Next
            End Sub

            Sub 宏1()
                ActiveSheet.ChartObjects("图表 1").Activate
                ActiveChart.FullSeriesCollection(2).Select
                ActiveChart.SetElement (msoElementDataLabelCallout)
            End Sub

            Sub recoder()
                ActiveSheet.ChartObjects("Chart 3").Activate
                ActiveChart.FullSeriesCollection(1).Select
                With Selection.Format.Fill
                    .Visible = msoTrue
                    .ForeColor.RGB = RGB(60, 179, 113)
                    .Transparency = 0
                    .Solid
                End With
                ActiveChart.Legend.Select
                ActiveChart.Legend.Select
                Selection.Position = xlTop
                ActiveChart.ChartTitle.Select
                Selection.Delete
                ActiveSheet.ChartObjects("Chart 3").Activate
                ActiveChart.Axes(xlValue).MajorGridlines.Select
                Selection.Delete
                ActiveSheet.ChartObjects("Chart 3").Activate
                ActiveChart.Axes(xlValue).Select
                ActiveChart.Axes(xlValue).MaximumScale = 100
                ActiveChart.FullSeriesCollection(1).Select
                ActiveChart.FullSeriesCollection(1).ApplyDataLabels
            End Sub


        7-11、图表的标签元素实例（动态标记饼图中的最大、最值扇形）
            Sub 宏1()
            Dim cht As ChartTitle
                Set cht = ActiveSheet.ChartObjects("图表 1").Chart.ChartTitle
                cht.Caption = Range("d1")
                cht.Format.Fill.ForeColor.RGB = 255
            End Sub



        7-12、图表的标题元素
            Sub 宏1()
            Dim cht As ChartTitle
                Set cht = ActiveSheet.ChartObjects("图表 1").Chart.ChartTitle
                cht.Caption = Range("d1")
                cht.Format.Fill.ForeColor.RGB = 255
            End Sub




        7-13、图表的综合应用（全自动智能图、表合一）
            'Sheet3
            Private Sub Worksheet_SelectionChange(ByVal Target As Range)
            Dim cht As Chart, d
            If Not Intersect(Sheet3.UsedRange, Target) Is Nothing Then
                Set cht = Sheet3.ChartObjects("图表 1").Chart
                cht.SetSourceData Target
                cht.ChartTitle.Caption = Target.EntireColumn.Range("a1") & "份各城市业绩图"
                cht.ApplyDataLabels , , , , , True, , True, , "-"
                d = "Sheet3!" & Target.Range("a1").EntireRow.Range("a1").Resize(Target.Rows.Count, 1).Address
                cht.SeriesCollection(1).XValues = d

            End If
            End Sub




        7-14、图表的综合应用（全自动智能图、表合一）
            Sub 宏3()
                ActiveSheet.ChartObjects("图表 1").Activate
                ActiveChart.FullSeriesCollection(1).XValues = "=Sheet3!$A$2:$A$6"
            End Sub




        7-15、图表的综合应用（条件标记）
            Sub test()
            Dim cht As Chart, ser As Series, arr, n, ar1, ar2
            Set cht = Sheet1.Shapes("图表 1").Chart
            Set ser = cht.SeriesCollection(1)
            ser.XValues = "='2015年各城市业绩汇总'!A2:A7"
            ar1 = ser.Values: ar2 = ser.XValues
            ReDim arr(1 To UBound(ar1))
            For n = 1 To UBound(ar1)
                If ar1(n) = Application.Max(ar1) Then
                    arr(n) = ar2(n) & Chr(10) & "最高" & ar1(n)
                Else
                    arr(n) = ar2(n)
                End If
            Next
            ser.XValues = arr
            End Sub

            Sub 标记最高图形()
            Dim cht As Chart, ser As Series, s, arr, i, ar1, ar2
            Set cht = Sheet1.Shapes("图表 1").Chart
            Set ser = cht.SeriesCollection(1)
            ser.XValues = "='2015年各城市业绩汇总'!$A$2:$A$7"
            ar1 = ser.Values: ar2 = ser.XValues
            ReDim arr(1 To UBound(ar1))
            For i = 1 To UBound(ser.Values)
                If ar1(i) = Application.Max(ser.Values) Then
                        arr(i) = ar2(i) & Chr(10) & "最高:" & ar1(i)
                Else
                        arr(i) = ar2(i)
                End If
            Next
            ser.XValues = arr
            End Sub





        7-16、图表的分类轴、数值轴、图例
            Sub test()
            Dim cht As Chart, ax As Axis, go As Axis
            Set cht = Sheet1.Shapes("图表 1").Chart
            Set ax = cht.Axes(xlValue)
            ax.MinimumScale = Application.Min(Range("b3:e3"))
            Set go = cht.Axes(xlCategory)
            go.MinimumScale = Application.Min(Range("b2:e2"))
            End Sub

            Sub tss()
            Dim cht As Chart, cleg As Legend, va As Axis, ca As Axis
            Set cht = Sheet1.Shapes("图表 3").Chart
            'Set cleg = cht.Legend
            'cleg.Font.Name = "黑体"
            'cleg.Font.Size = 20
            'cleg.Format.Line.ForeColor.RGB = 255
            Set va = cht.Axes(xlValue)
            va.MinimumScale = Application.Min(Range("b3:e3"))
            Set ca = cht.Axes(xlCategory)
            ca.MinimumScale = Application.Min(Range("b2:e2"))
            End Sub




        7-17、图表的综合应用（根据坐标生成图形）
            Sub 生成图形()
            Dim cht As Chart, n%, va As Axis, ca As Axis
            On Error Resume Next
            Sheet1.ChartObjects.Delete
            For n = 2 To Cells(Cells.Rows.Count, "e").End(xlUp).Row Step 2
                Set cht = Sheet1.Shapes.AddChart(xlXYScatterLines, Cells(1, "f").Left, Cells(n, "f").Top, Cells(n, "f").Width, Cells(n, "f").Height * 2).Chart
                cht.SetSourceData Range("b" & n).Resize(2, 4)
                With cht
                    .Legend.Delete
                    Set va = .Axes(xlValue)
                    With va
                        .Delete
                        .MajorGridlines.Delete
                        .MinimumScale = Application.Min(Range("b" & n + 1).Resize(1, 4))
                    End With
                    
                    Set ca = .Axes(xlCategory)
                    With ca
                        .Delete
                        .MinimumScale = Application.Min(Range("b" & n).Resize(1, 4))
                    End With
                    
                    .PlotArea.Top = 0
                    .PlotArea.Left = 0
                    .PlotArea.Width = 999
                    .PlotArea.Height = 999
                    cht.ApplyDataLabels , , , , , True
                End With
            Next
            End Sub

            Sub test()
            Dim cht As Chart, n%, va As Axis, ca As Axis
            'On Error Resume Next
            Sheet1.ChartObjects.Delete
            For n = 2 To Range("e2").End(xlDown).Row Step 2
                Set cht = Sheet1.Shapes.AddChart(xlXYScatterLines, [f1].Left, Cells(n, "f").Top, Cells(n, "f").Width, Cells(n, "f").Height * 2).Chart
                cht.SetSourceData Range("b" & n).Resize(2, 4)
                With cht
                    Set va = .Axes(xlValue)
                    va.Delete
                    va.MajorGridlines.Delete
                    va.MinimumScale = Application.Min(Range("b" & n + 1).Resize(1, 4))
                    Set ca = .Axes(xlCategory)
                    ca.Delete
                    ca.MinimumScale = Application.Min(Range("b" & n).Resize(1, 4))
                    .Legend.Delete
                    .PlotArea.Select
            '        .PlotArea.Top = 0
            '        .PlotArea.Left = 0
            '        .PlotArea.Width = 999
            '        .PlotArea.Height = 999
            End With
                cht.ApplyDataLabels , , , , , True
            Next
            End Sub




        7-18、图表的综合应用（根据坐标生成图形）
            Sub 生成图形()
            Dim cht As Chart, n%, va As Axis, ca As Axis
            On Error Resume Next
            Sheet1.ChartObjects.Delete
            For n = 2 To Cells(Cells.Rows.Count, "e").End(xlUp).Row Step 2
                Set cht = Sheet1.Shapes.AddChart(xlXYScatterLines, Cells(1, "f").Left, Cells(n, "f").Top, Cells(n, "f").Width, Cells(n, "f").Height * 2).Chart
                cht.SetSourceData Range("b" & n).Resize(2, 4)
                With cht
                    .Legend.Delete
                    Set va = .Axes(xlValue)
                    With va
                        .Delete
                        .MajorGridlines.Delete
                        .MinimumScale = Application.Min(Range("b" & n + 1).Resize(1, 4))
                    End With
                    
                    Set ca = .Axes(xlCategory)
                    With ca
                        .Delete
                        .MinimumScale = Application.Min(Range("b" & n).Resize(1, 4))
                    End With
                    
                    .PlotArea.Top = 0
                    .PlotArea.Left = 0
                    .PlotArea.Width = 999
                    .PlotArea.Height = 999
                    cht.ApplyDataLabels , , , , , True
                End With
            Next
            End Sub

            Sub test()
            Dim cht As Chart, n%, va As Axis, ca As Axis
            'On Error Resume Next
            Sheet1.ChartObjects.Delete
            For n = 2 To Range("e2").End(xlDown).Row Step 2
                Set cht = Sheet1.Shapes.AddChart(xlXYScatterLines, [f1].Left, Cells(n, "f").Top, Cells(n, "f").Width, Cells(n, "f").Height * 2).Chart
                cht.SetSourceData Range("b" & n).Resize(2, 4)
                With cht
                    Set va = .Axes(xlValue)
                    va.Delete
                    va.MajorGridlines.Delete
                    va.MinimumScale = Application.Min(Range("b" & n + 1).Resize(1, 4))
                    Set ca = .Axes(xlCategory)
                    ca.Delete
                    ca.MinimumScale = Application.Min(Range("b" & n).Resize(1, 4))
                    .Legend.Delete
                    .PlotArea.Select
            '        .PlotArea.Top = 0
            '        .PlotArea.Left = 0
            '        .PlotArea.Width = 999
            '        .PlotArea.Height = 999
            End With
                cht.ApplyDataLabels , , , , , True
            Next
            End Sub




        7-19、图表的事件基础
            Private Sub Worksheet_SelectionChange(ByVal Target As Range)

            End Sub




        7-20、动态显示选择的系列图表的值
        #图表1
            Private Sub Worksheet_SelectionChange(ByVal Target As Range)

            End Sub

            #图表2
            Private Sub Chart_Select(ByVal ElementID As Long, ByVal Arg1 As Long, ByVal Arg2 As Long)
            Dim cht As Chart
            On Error Resume Next
            Set cht = Sheets("Chart1")
            cht.ApplyDataLabels xlDataLabelsShowNone
            cht.SeriesCollection(Arg1).ApplyDataLabels
            End Sub





        7-21、图表的综合应用（给图表排序） 
                    Sub 宏1()
                        ActiveChart.PlotArea.Select
                        ActiveChart.SetSourceData Source:=Range("A1:B13")
                    End Sub





example
    Private Sub VBAPassword() 'ÄãÒª½â±£»¤µÄExcelÎÄ¼þÂ·¾¶
    Filename = Application.GetOpenFilename("ExcelÎÄ¼þ£¨*.xls & *.xla & *.xlt & *.xlam£©,*.xls;*.xla;*.xlt;*.xlam", , "VBAÆÆ½â")
    If Dir(Filename) = "" Then
    MsgBox "Ã»ÕÒµ½Ïà¹ØÎÄ¼þ,ÇåÖØÐÂÉèÖÃ¡£"
    Exit Sub
    Else
    FileCopy Filename, Filename & ".bak" '±¸·ÝÎÄ¼þ¡£
    End If
    Dim GetData As String * 5
    Open Filename For Binary As #1
    Dim CMGs As Long
    Dim DPBo As Long
    For i = 1 To LOF(1)
    Get #1, i, GetData
    If GetData = "CMG=""" Then CMGs = i
    If GetData = "[Host" Then DPBo = i - 2: Exit For
    Next
    If CMGs = 0 Then
    MsgBox "ÇëÏÈ¶ÔVBA±àÂëÉèÖÃÒ»¸ö±£»¤ÃÜÂë...", 32, "ÌáÊ¾"
    Exit Sub
    End If

    Dim St As String * 2
    Dim s20 As String * 1
    'È¡µÃÒ»¸ö0D0AÊ®Áù½øÖÆ×Ö´®
    Get #1, CMGs - 2, St
    'È¡µÃÒ»¸ö20Ê®ÁùÖÆ×Ö´®
    Get #1, DPBo + 16, s20
    'Ìæ»»¼ÓÃÜ²¿·Ý»úÂë
    For i = CMGs To DPBo Step 2
    Put #1, i, St
    Next
    '¼ÓÈë²»Åä¶Ô·ûºÅ
    If (DPBo - CMGs) Mod 2 <> 0 Then
    Put #1, DPBo + 1, s20
    End If
    MsgBox "ÎÄ¼þ½âÃÜ³É¹¦......", 32, "ÌáÊ¾"
    Close #1
    End Sub



    Sub picCapture()
        Selection.CopyPicture Appearance:=xlScreen, Format:=xlPicture
    End Sub

    Sub cellToText()
        Selection.Copy
        Selection.PasteSpecial Paste:=xlPasteValues, operation:=xlNone, SkipBlanks _
            :=False, Transpose:=False
    End Sub

    'Created on 2020-05-01
    '@author: tianyunchuan

    Sub plusMinus5to10(control As IRibbonControl)
    Dim rng As Range, rng_base_col As Range

    cell_start = Selection.Cells(1).Address
    cell_end = Selection.Cells(Selection.Cells.Count).Address

    n_row_start = Selection.Cells(1).Row
    n_col_start = Selection.Cells(1).Column
    n_row_end = Selection.Cells(Selection.Cells.Count).Row
    n_col_end = Selection.Cells(Selection.Cells.Count).Column

    Set rng = Range(Range(cell_start), Range(cell_end))
    Set rng_base_col = Range(cell_start, Cells(n_row_end, n_col_start))

    For i_row = n_row_start To n_row_end + 2
     
     If Cells(i_row + 1, n_col_start).Value >= 30 Then
        For j_col = n_col_start + 1 To n_col_end
            If Cells(i_row + 1, j_col) - Cells(n_row_start, j_col) >= 10 Then
                Cells(i_row + 1, j_col).Interior.Color = RGB(218, 150, 148)
            ElseIf Cells(i_row + 1, j_col) - Cells(n_row_start, j_col) >= 5 Then
                Cells(i_row + 1, j_col).Interior.Color = RGB(242, 220, 219)
            ElseIf Cells(i_row + 1, j_col) - Cells(n_row_start, j_col) <= -10 Then
                Cells(i_row + 1, j_col).Interior.Color = RGB(149, 179, 215)
            ElseIf Cells(i_row + 1, j_col) - Cells(n_row_start, j_col) <= -5 Then
                Cells(i_row + 1, j_col).Interior.Color = RGB(220, 230, 241)
            Else
                Cells(i_row + 1, j_col).Interior.Color = RGB(255, 255, 255)
            End If
        Next
     Else
        'Range(Cells(i_row + 1, n_col_start+1),(Cells(i_row + 1, n_col_end)).Interior.Color = RGB(255, 255, 255)
        Range(Cells(i_row + 1, n_col_start + 1), Cells(i_row + 1, n_col_end)).Interior.Color = RGB(255, 255, 255)
     End If
      
    Next
    End Sub
    Sub CreateSheetsIndex()

    ' Maxm

        answer = MsgBox("Create an INDEX page for all worksheets?", vbYesNo, "INDEX PAGE")
        Select Case answer
            Case vbYes
            Case vbNo
                'MsgBox "Cancelled!"
                Exit Sub
            'Case vbCancel
                'MsgBox "Cancelled"
                'Exit Sub
        End Select
        
        'Application.ScreenUpdating = False    'screen update off
        Worksheets(1).Activate      'go to first worksheet
        
        'Sheets.Add.Name = "SheetsIndex"
        
        sNew = "Index"
            For Each s In ActiveWorkbook.Sheets
            If s.Name = sNew Then sNew = sNew & "(1)"
            Next
        Sheets.Add.Name = sNew

        
        Dim Pt As Range    'ÉùÃ÷¶ÔÏó±äÁ¿ÃüÃûÎª Pt
        Dim Sh As Worksheet
        With Sheets(sNew)
            .Select    'Ñ¡¶¨"Index"¹¤×÷±í
            .Columns(1).ClearContents
            Set Pt = .Range("A1")
            Pt.Value = "Index"
            For Each Sh In ActiveWorkbook.Sheets
                If Sh.Name <> sNew Then
                    .Hyperlinks.Add Anchor:=Pt, Address:="", SubAddress:="'" & Sh.Name & "'" & "!A1", TextToDisplay:=Sh.Name
                    '.Hyperlinks.Add Pt, "", sh.Name & "!A1", , sh.Name
                End If
                Set Pt = Pt.Offset(1, 0)    '¶ÔÏó±äÁ¿µÄÎ»ÖÃÏòÏÂÆ«ÒÆÒ»ÐÐ
            Next Sh
            Columns("A:A").AutoFit    'AÁÐ»ñµÃ×îÊÊµ±µÄÁÐ¿í
        End With
        Set Pt = Nothing    'ÊÍ·Å¶ÔÏó±äÁ¿
        Range("A1").Select
        'Application.ScreenUpdating = True    '´ò¿ªÆÁÄ»¸üÐÂ
        
        MsgBox ("Done!")
        
    End Sub

    Sub getWebLink(control As IRibbonControl)
    Dim m As Integer, n As Integer
    m = Cells(Rows.Count, 1).End(xlUp).Row
    For n = 1 To m
        Cells(n, 2) = Cells(n, 1).Hyperlinks(1).Address
    Next
    End Sub

    Sub uniqueValue_forFA(control As IRibbonControl)
    Set d = CreateObject("scripting.dictionary")
    arr = Selection
    For Each rng In arr
    i = d.Item(rng)
    d.Item(rng) = d.Item(rng) + 1
    i = d.Item(rng)
    Next
    Sheets.Add.Name = "FA"
    Sheets("FA").[a1].Value = "content"
    Sheets("FA").[b1].Value = "frequency"
    Sheets("FA").[a2].Resize(d.Count) = Application.Transpose(d.keys)
    Sheets("FA").[b2].Resize(d.Count) = Application.Transpose(d.items)
    End Sub

    Sub translationLanguageReplace(control As IRibbonControl)
    '½¨Á¢TH¹¤×÷Ò³,1-2ÁÐÎªÌæ»»ÁÐ,,,ÍêÈ«Æ¥Åä,,,Ñ¡ÖÐËùÓÐ¹¤×÷Ò³,È«Ñ¡

    Dim m As Integer, n As Integer
    m = Sheets("TH").Cells(Rows.Count, 1).End(xlUp).Row
    For n = 1 To m
    Selection.Replace What:=Sheets("TH").Cells(n, 1), Replacement:=Sheets("TH").Cells(n, 2), LookAt:=xlWhole, _
           SearchOrder:=xlByRows, MatchCase:=True, SearchFormat:=False, _
           ReplaceFormat:=False
    Next
    End Sub

    Sub missReplace(control As IRibbonControl)
    Dim i As Integer, j As Integer, n As Integer, rng As Range, rng1 As Range
    i = ActiveCell.Column 'Ëã³öÑ¡ÖÐÁÐµÄÁÐÊý
    j = Cells(1, Columns.Count).End(xlToLeft).Column 'Ëã³öÁÐµÄ×ÜÊý
    k = Cells(Rows.Count, i).End(xlUp).Row  '¼ÆËãÑ¡ÖÐÁÐµÄÐÐÊý

    For Each rng In Range(Cells(1, i), Cells(k, i))
        If rng <> "" And rng <> "miss" Then Cells(n + 1, j + 1) = rng: n = n + 1
    Next 'ÔÚ×îºóÒ»ÁÐÉú³ÉÑ¡ÖÐÁÐÖÐÄÚÈÝ£¨²»º¬miss¡¢¿Õ¸ñ£©

    j1 = Cells(1, Columns.Count).End(xlToLeft).Column
    k1 = Cells(Rows.Count, j1).End(xlUp).Row
    For Each rng1 In Range(Cells(1, i), Cells(k, i))
        m = Application.RandBetween(2, k1)
        If rng1 = "miss" Then rng1 = Cells(m, j1): n = n + 1
    Next '°ÑÑ¡ÖÐÁÐÖÐmiss±êÊ¶µ¥Ôª¸ñÌæ»»³É¸Õ²ÅÉú³É×îºóÒ»ÁÐµÄÄÚÈÝ£¬Î»ÖÃËæ»ú

    End Sub


    Sub getQnNoSpaceSplit(control As IRibbonControl)
    Dim rng As Range, rng_base_col As Range

    cell_start = Selection.Cells(1).Address
    cell_end = Selection.Cells(Selection.Cells.Count).Address

    n_row_start = Selection.Cells(1).Row
    n_col_start = Selection.Cells(1).Column
    n_row_end = Selection.Cells(Selection.Cells.Count).Row
    n_col_end = Selection.Cells(Selection.Cells.Count).Column

    Set rng = Range(Range(cell_start), Range(cell_end))

    For i = n_row_start To n_row_end
        arr = Split(Cells(i, n_col_start), " ")
        Cells(i, n_col_start + 1) = arr(0)
        'Cells(i, n_col_start + 2) = arr(1)

    Next

    End Sub

    ' ÎÊÎÊQCÖÐÎÄÎÊ¾í£¬ÈÕÎÄÎÊ¾í£¬¹¤×÷Ò³·Ö±ðÃüÃûÎª"cn","jp"
    ' Ö´ÐÐºê

    Sub QnContentList_Cnjp(control As IRibbonControl)
    Dim row_cn%

    '    Worksheets("TH").Cells.Select
    Worksheets.Add.Name = "TH"
    row_cn = Worksheets("cn").Cells(Rows.Count, 5).End(xlUp).Row

    For i_row = 2 To row_cn

        If Worksheets("cn").Cells(i_row, 3) = "SAR" Or Worksheets("cn").Cells(i_row, 3) = "MAC" Then
            n_TH_row = n_TH_row + 1
            Worksheets("TH").Cells(n_TH_row, 1) = Worksheets("jp").Cells(i_row, 12)
            Worksheets("TH").Cells(n_TH_row, 2) = Worksheets("cn").Cells(i_row, 12)
            Worksheets("TH").Cells(n_TH_row, 3) = Worksheets("cn").Cells(i_row, 2)
            Worksheets("TH").Cells(n_TH_row, 5) = Worksheets("cn").Cells(i_row, 3)
            For j_col = 13 To Worksheets("cn").Cells(i_row, 13).End(xlToRight).Column
                n_TH_row = n_TH_row + 1
                Worksheets("TH").Cells(n_TH_row, 1) = Worksheets("jp").Cells(i_row, j_col)
                Worksheets("TH").Cells(n_TH_row, 2) = Worksheets("cn").Cells(i_row, j_col)
                'Worksheets("TH").Cells(n_TH_row, 3) = Worksheets("cn").Cells(i_row, 2)
                Worksheets("TH").Cells(n_TH_row, 4) = j_col - 12
                Worksheets("TH").Cells(n_TH_row, 5) = "variable"
            Next
            
        ElseIf Worksheets("cn").Cells(i_row, 3) = "FAS" Then
            n_TH_row = n_TH_row + 1
            Worksheets("TH").Cells(n_TH_row, 1) = Worksheets("jp").Cells(i_row, 11)
            Worksheets("TH").Cells(n_TH_row, 2) = Worksheets("cn").Cells(i_row, 11)
            Worksheets("TH").Cells(n_TH_row, 3) = Worksheets("cn").Cells(i_row, 2)
            Worksheets("TH").Cells(n_TH_row, 5) = Worksheets("cn").Cells(i_row, 3)
        
        ElseIf Worksheets("cn").Cells(i_row, 3) = "MTM" Or Worksheets("cn").Cells(i_row, 3) = "MTS" Then
            n_TH_row = n_TH_row + 1
            Worksheets("TH").Cells(n_TH_row, 1) = Worksheets("jp").Cells(i_row, 11)
            Worksheets("TH").Cells(n_TH_row, 2) = Worksheets("cn").Cells(i_row, 11)
            Worksheets("TH").Cells(n_TH_row, 3) = Worksheets("cn").Cells(i_row, 2)
            Worksheets("TH").Cells(n_TH_row, 5) = Worksheets("cn").Cells(i_row, 3)
            
            For j_col = 13 To Worksheets("cn").Cells(i_row, 13).End(xlToRight).Column
                n_TH_row = n_TH_row + 1
                Worksheets("TH").Cells(n_TH_row, 1) = Worksheets("jp").Cells(i_row, j_col)
                Worksheets("TH").Cells(n_TH_row, 2) = Worksheets("cn").Cells(i_row, j_col)
                'Worksheets("TH").Cells(n_TH_row, 3) = Worksheets("cn").Cells(i_row, 2)
                Worksheets("TH").Cells(n_TH_row, 4) = j_col - 12
                Worksheets("TH").Cells(n_TH_row, 5) = "variable"
            Next
            
            For j_row = i_row To Worksheets("cn").Cells(i_row, 3).End(xlDown).Row
                n_TH_row = n_TH_row + 1
                Worksheets("TH").Cells(n_TH_row, 1) = Worksheets("jp").Cells(j_row, 11)
                Worksheets("TH").Cells(n_TH_row, 2) = Worksheets("cn").Cells(j_row, 11)
                Worksheets("TH").Cells(n_TH_row, 3) = Worksheets("cn").Cells(j_row, 5)
                Worksheets("TH").Cells(n_TH_row, 4) = j_row - i_row + 1
                Worksheets("TH").Cells(n_TH_row, 5) = "sub question"
            Next
            
        End If
        
    Next


    Cells.Select
    'Range("A11").Activate
    With Selection.Font
        .Size = 9
        .Strikethrough = False
        .Superscript = False
        .Subscript = False
        .OutlineFont = False
        .Shadow = False
        .Underline = xlUnderlineStyleNone
        .ThemeColor = xlThemeColorLight1
        .TintAndShade = 0
        .ThemeFont = xlThemeFontNone
    End With
    With Selection.Font
        .Name = "MS PGothic"
        .Size = 9
        .Strikethrough = False
        .Superscript = False
        .Subscript = False
        .OutlineFont = False
        .Shadow = False
        .Underline = xlUnderlineStyleNone
        .ThemeColor = xlThemeColorLight1
        .TintAndShade = 0
        .ThemeFont = xlThemeFontNone
    End With
    With Selection
        .HorizontalAlignment = xlGeneral
        .VerticalAlignment = xlBottom
        .WrapText = False
        .Orientation = 0
        .AddIndent = False
        .IndentLevel = 0
        .ShrinkToFit = False
        .ReadingOrder = xlContext
        .MergeCells = False
    End With
    Columns("A:B").Select
    Range("B11").Activate
    Selection.ColumnWidth = 50
    Columns("C:I").Select
    'Range("C11").Activate
    Selection.ColumnWidth = 5
    End Sub

    'Created on 2020-05-05
    '@author: tianyunchuan

    Sub codeToOnehot(control As IRibbonControl)
    Dim rng As Range
    n_row_start = Selection.Cells(1).Row
    n_col_start = Selection.Cells(1).Column
    n_row_end = Cells(Rows.Count, n_col_start).End(xlUp).Row

    max_code = 0
    For i_row = n_row_start + 1 To n_row_end
        'Cells(i_row, n_col_start).Value
        arr = VBA.Split(Cells(i_row, n_col_start).Value, ",")
        For i_arr = 0 To UBound(arr)
            If VBA.IsNumeric(arr(i_arr)) Then
                If arr(i_arr) <> "" Then
                    'On Error Resume Next
                    'Cells(i_row, n_col_start).Offset(, arr(i_arr)) = arr(i_arr)
                    Cells(i_row, n_col_start).Offset(, arr(i_arr)) = 1
                    If CInt(arr(i_arr)) > max_code Then
                        max_code = CInt(arr(i_arr))
                    End If
                End If
            End If
        Next
    Next

    n_col_end = max_code + n_col_start

    'Set rng = Range(Cells(n_row_start, n_col_start), Cells(n_row_end, max_code))
    Set rng = Range(Cells(n_row_start + 1, n_col_start + 1), Cells(n_row_end, n_col_end))
    rng.Select
    Selection.Replace What:="", Replacement:="0", LookAt:=xlWhole, _
        SearchOrder:=xlByRows, MatchCase:=True, SearchFormat:=False, _
        ReplaceFormat:=False

    For i = 1 To max_code
        Cells(1, i + n_col_start) = Cells(1, n_col_start).Value & "_" & i
    Next

    End Sub


    Sub onehotToCode(control As IRibbonControl)
    Dim rng_All As Range

    code = ","
    Selection.Replace What:="", Replacement:="0", LookAt:=xlWhole, _
        SearchOrder:=xlByRows, MatchCase:=True, SearchFormat:=False, _
        ReplaceFormat:=False

    n_row_start = Range(Selection.Address)(1).Row
    n_col_start = Range(Selection.Address)(1).Column
    n_row_end = Cells(Rows.Count, n_col_start).End(xlUp).Row
    n_col_end = Cells(n_row_start, n_col_start).End(xlToRight).Column

    For i_row = n_row_start + 1 To n_row_end

        If Application.Sum(Range(Cells(i_row, n_col_start), Cells(i_row, n_col_end))) = 0 Then
            Cells(i_row, n_col_end + 1) = "*"
        
        Else
            For i_col = n_col_start To n_col_end
                If Cells(i_row, i_col) = 1 Then
                    code = code & i_col - n_col_start + 1 & ","
                End If
            Next
            
        Cells(i_row, n_col_end + 1) = code
        code = ","
        End If
        
    Next

    arr = VBA.Split(Cells(n_row_start, n_col_start).Value, "_")
    Cells(n_row_start, n_col_end + 1).Value = arr(0)

    End Sub


    'control As IRibbonControl


    'Ãû³Æ                   Öµ      ÃèÊö
    'xlBarClustered         57      ´Ø×´ÌõÐÎÍ¼
    'xlBarOfPie             71      ¸´ºÏÌõ±ýÍ¼
    'xlBarStacked100        59      °Ù·Ö±È¶Ñ»ýÌõÐÎÍ¼
    'xlBubble               15      ÆøÅÝÍ¼
    'xlColumnClustered      51      ´Ø×´ÖùÐÎÍ¼
    'xlColumnStacked100     53      °Ù·Ö±È¶Ñ»ýÖùÐÎÍ¼
    'xlDoughnut             -4120   Ô²»·Í¼
    'xlLineMarkers          65      Êý¾ÝµãÕÛÏßÍ¼
    'xlRadar                -4151   À×´ïÍ¼
    'xlXYScatter            -4169   É¢µãÍ¼
    '
    'control As IRibbonControl

    'Created on 2020-05-08
    '@author: tianyunchuan

    Sub columnClustered_OneSer(control As IRibbonControl)
    Dim cht_shape As Shape, cht_obj As ChartObject
    Dim sha As Shape

    For Each sha In ActiveSheet.Shapes
        'If sha.Type = 12 Then sha.Delete
        sha.Delete
    Next

    'Set cht_shape_1 = Sheet2.Shapes.AddChart(xlLineMarkers, 1, 200, 500, 200)
    Set cht_shape_1 = ActiveSheet.Shapes.AddChart(xlColumnClustered, 200, 300, 800, 200)

    ActiveSheet.Shapes(cht_shape_1.Name).Line.Visible = msoFalse
    ActiveSheet.Shapes(cht_shape_1.Name).Fill.Visible = msoFalse


    ActiveSheet.ChartObjects(cht_shape_1.Name).Activate
    ActiveChart.SeriesCollection(1).Select
    ActiveChart.SeriesCollection(1).ApplyDataLabels

    With Selection.Format.Fill
        .ForeColor.RGB = RGB(143, 188, 143)
    '    .Visible = msoTrue
    '    .ForeColor.ObjectThemeColor = msoThemeColorAccent6
    '    .ForeColor.TintAndShade = 0
    '    .ForeColor.Brightness = 0.400000006
    '    .Transparency = 0
    '    .Solid
    End With

    ActiveChart.Axes(xlValue).Select
    Selection.Delete
    ActiveSheet.ChartObjects(cht_shape_1.Name).Activate
    ActiveChart.Axes(xlValue).MajorGridlines.Select
    Selection.Delete

    ActiveSheet.ChartObjects(cht_shape_1.Name).Activate
    ActiveChart.ChartTitle.Select
    Selection.Delete
    ActiveSheet.ChartObjects(cht_shape_1.Name).Activate
    ActiveChart.Legend.Select
    Selection.Delete

    ActiveSheet.ChartObjects(cht_shape_1.Name).Activate
    ActiveChart.Axes(xlCategory).Select
    Selection.TickLabels.Orientation = xlVertical
    Selection.MajorTickMark = xlNone


    With Selection.TickLabels.Font
        .Name = "MS PGothic"
        .Size = 10
    End With

    ActiveChart.SeriesCollection(1).DataLabels.Select
    With Selection.Format.TextFrame2.TextRange.Font
        .Name = "MS PGothic"
        .Size = 10
    End With


    ActiveSheet.ChartObjects(cht_shape_1.Name).Activate
    ActiveChart.PlotArea.Select
    Selection.Format.Fill.Visible = msoFalse
    Selection.Format.Line.Visible = msoFalse

    End Sub

    'Created on 2020-05-08
    '@author: tianyunchuan

    Sub columnClustered_MaToSa(control As IRibbonControl)
    Dim cht_shape As Shape, cht_obj As ChartObject

    For Each sha In ActiveSheet.Shapes
        'If sha.Type = 12 Then sha.Delete
        sha.Delete
    Next
    arr_red_2 = Array(RGB(255, 192, 203), RGB(220, 20, 60))

    'Set cht_shape_1 = Sheet2.Shapes.AddChart(xlLineMarkers, 1, 200, 500, 200)
    Set cht_shape_1 = ActiveSheet.Shapes.AddChart(xlColumnClustered, 200, 300, 800, 300)

    ActiveSheet.Shapes(cht_shape_1.Name).Line.Visible = msoFalse
    ActiveSheet.Shapes(cht_shape_1.Name).Fill.Visible = msoFalse

    ActiveSheet.ChartObjects(cht_shape_1.Name).Activate
    ActiveChart.Legend.Select
    ActiveChart.Legend.Select
    Selection.Position = xlTop

    ActiveSheet.ChartObjects(cht_shape_1.Name).Activate
    ActiveChart.Legend.Select
    With Selection.Format.TextFrame2.TextRange.Font
        .NameFarEast = "MS PGothic"
        .Name = "MS PGothic"
    End With

    ActiveChart.Axes(xlValue).Select
    Selection.Delete
    ActiveSheet.ChartObjects(cht_shape_1.Name).Activate
    ActiveChart.Axes(xlValue).MajorGridlines.Select
    Selection.Delete

    ActiveSheet.ChartObjects(cht_shape_1.Name).Activate
    ActiveChart.Axes(xlCategory).Select
    Selection.TickLabels.Orientation = xlVertical
    Selection.MajorTickMark = xlNone
    With Selection.TickLabels.Font
        .Name = "MS PGothic"
        .Size = 9
    End With
    ActiveChart.SeriesCollection(1).Select
    ActiveChart.ChartGroups(1).Overlap = 70


    For i = 1 To 2

        ActiveSheet.ChartObjects(cht_shape_1.Name).Activate
        ActiveChart.SeriesCollection(i).Select
        ActiveChart.SeriesCollection(i).ApplyDataLabels
        
        With Selection.Format.Fill
            .ForeColor.RGB = (arr_red_2(i - 1))
        '    .Visible = msoTrue
        '    .ForeColor.ObjectThemeColor = msoThemeColorAccent6
        '    .ForeColor.TintAndShade = 0
        '    .ForeColor.Brightness = 0.400000006
        '    .Transparency = 0
        '    .Solid
        End With
        
        ActiveChart.SeriesCollection(i).DataLabels.Select
        With Selection.Format.TextFrame2.TextRange.Font
            .Name = "MS PGothic"
            .Size = 10
        End With

    Next

    ActiveSheet.ChartObjects(cht_shape_1.Name).Activate
    ActiveChart.PlotArea.Select
    Selection.Format.Fill.Visible = msoFalse
    Selection.Format.Line.Visible = msoFalse

    End Sub

    'Created on 2020-05-09
    '@author: tianyunchuan

    Sub columnClustered_2SerCompare(control As IRibbonControl)
    Dim cht_shape As Shape, cht_obj As ChartObject

    For Each sha In ActiveSheet.Shapes
        'If sha.Type = 12 Then sha.Delete
        sha.Delete
    Next
    arr_red_2 = Array(RGB(143, 188, 143), RGB(100, 149, 237))

    'Set cht_shape_1 = Sheet2.Shapes.AddChart(xlLineMarkers, 1, 200, 500, 200)
    Set cht_shape_1 = ActiveSheet.Shapes.AddChart(xlColumnClustered, 200, 300, 800, 300)

    ActiveSheet.Shapes(cht_shape_1.Name).Line.Visible = msoFalse
    ActiveSheet.Shapes(cht_shape_1.Name).Fill.Visible = msoFalse

    ActiveSheet.ChartObjects(cht_shape_1.Name).Activate
    ActiveChart.Legend.Select
    ActiveChart.Legend.Select
    Selection.Position = xlTop

    ActiveSheet.ChartObjects(cht_shape_1.Name).Activate
    ActiveChart.Legend.Select
    With Selection.Format.TextFrame2.TextRange.Font
        .NameFarEast = "MS PGothic"
        .Name = "MS PGothic"
    End With

    ActiveChart.Axes(xlValue).Select
    Selection.Delete
    ActiveSheet.ChartObjects(cht_shape_1.Name).Activate
    ActiveChart.Axes(xlValue).MajorGridlines.Select
    Selection.Delete

    ActiveSheet.ChartObjects(cht_shape_1.Name).Activate
    ActiveChart.Axes(xlCategory).Select
    Selection.TickLabels.Orientation = xlVertical
    Selection.MajorTickMark = xlNone
    With Selection.TickLabels.Font
        .Name = "MS PGothic"
        .Size = 9
    End With
    ActiveChart.SeriesCollection(1).Select
    ActiveChart.ChartGroups(1).Overlap = -10


    For i = 1 To 2

        ActiveSheet.ChartObjects(cht_shape_1.Name).Activate
        ActiveChart.SeriesCollection(i).Select
        ActiveChart.SeriesCollection(i).ApplyDataLabels
        
        With Selection.Format.Fill
            .ForeColor.RGB = (arr_red_2(i - 1))
        End With
        
        ActiveChart.SeriesCollection(i).DataLabels.Select
        With Selection.Format.TextFrame2.TextRange.Font
            .Name = "MS PGothic"
            .Size = 10
        End With

    Next

    ActiveSheet.ChartObjects(cht_shape_1.Name).Activate
    ActiveChart.PlotArea.Select
    Selection.Format.Fill.Visible = msoFalse
    Selection.Format.Line.Visible = msoFalse

    End Sub

    'Created on 2020-05-09
    '@author: tianyunchuan

    Sub columnClustered_nSerTimes(control As IRibbonControl)
    Dim cht_shape As Shape, cht_obj As ChartObject, i_ser%

    Dim arr_color

    'n_times must be same to select rows
    n_times = InputBox("input times")
    colorNum = InputBox("input colorNum")
    i_color_start = InputBox("i_color_start")
    i_color_step = InputBox("i_color_step")


    ReDim arr_color(1 To n_times)

    'i_color_start = 0.7
    'i_color_step = 0.4
    'colorNum = 5

    For i = 1 To n_times
        arr_color(i) = i_color_start
        i_color_start = i_color_start - i_color_step
    Next


    For Each sha In ActiveSheet.Shapes
        'If sha.Type = 12 Then sha.Delete
        sha.Delete
    Next


    'Set cht_shape_1 = Sheet2.Shapes.AddChart(xlLineMarkers, 1, 200, 500, 200)
    Set cht_shape_1 = ActiveSheet.Shapes.AddChart(xlColumnClustered, 200, 300, 800, 300)

    ActiveSheet.Shapes(cht_shape_1.Name).Line.Visible = msoFalse
    ActiveSheet.Shapes(cht_shape_1.Name).Fill.Visible = msoFalse

    ActiveSheet.ChartObjects(cht_shape_1.Name).Activate
    ActiveChart.Legend.Select
    ActiveChart.Legend.Select
    Selection.Position = xlTop

    ActiveSheet.ChartObjects(cht_shape_1.Name).Activate
    ActiveChart.Legend.Select
    With Selection.Format.TextFrame2.TextRange.Font
        .NameFarEast = "MS PGothic"
        .Name = "MS PGothic"
    End With

    ActiveChart.Axes(xlValue).Select
    Selection.Delete
    ActiveSheet.ChartObjects(cht_shape_1.Name).Activate
    ActiveChart.Axes(xlValue).MajorGridlines.Select
    Selection.Delete

    ActiveSheet.ChartObjects(cht_shape_1.Name).Activate
    ActiveChart.Axes(xlCategory).Select
    Selection.TickLabels.Orientation = xlVertical
    Selection.MajorTickMark = xlNone
    With Selection.TickLabels.Font
        .Name = "MS PGothic"
        .Size = 9
    End With
    ActiveChart.SeriesCollection(1).Select
    ActiveChart.ChartGroups(1).Overlap = -10


    For i = 1 To n_times

        ActiveSheet.ChartObjects(cht_shape_1.Name).Activate
        ActiveChart.SeriesCollection(i).Select
        ActiveChart.SeriesCollection(i).ApplyDataLabels
        
        With Selection.Format.Fill
            .Visible = msoTrue
            .ForeColor.ObjectThemeColor = msoThemeColorAccent & colorNum
            .ForeColor.TintAndShade = 0
            .ForeColor.Brightness = arr_color(i)
            .Transparency = 0
            .Solid
        End With
        
        ActiveChart.SeriesCollection(i).DataLabels.Select
        With Selection.Format.TextFrame2.TextRange.Font
            .Name = "MS PGothic"
            .Size = 9
        End With
        Selection.NumberFormat = "#,##0.00"
        Selection.NumberFormat = "#,##0"


    Next

    ActiveSheet.ChartObjects(cht_shape_1.Name).Activate
    ActiveChart.PlotArea.Select
    Selection.Format.Fill.Visible = msoFalse
    Selection.Format.Line.Visible = msoFalse

    End Sub

    Sub 冒泡bubble()
    arr = Selection
    For i = 1 To UBound(arr)
        For j = i + 1 To UBound(arr)
            If arr(i, 1) < arr(j, 1) Then
                k = arr(i, 1)
                arr(i, 1) = arr(j, 1)
                arr(j, 1) = k
            End If
        Next
    Next
    [b1].Resize(UBound(arr)) = arr

    End Sub


